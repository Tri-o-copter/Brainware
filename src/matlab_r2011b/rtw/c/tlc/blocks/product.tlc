%% 
%% $Revision: 1.1.6.25 $
%% 
%%
%% Copyright 1994-2010 The MathWorks, Inc.
%%
%% Abstract: Product block target file.

%implements Product "C"


%% Function: BlockTypeSetup ====================================================
%% Abstract:
%%
%function BlockTypeSetup(block, system) void

%endfunction

%% Function: StartClassic=======================================================
%% Abstract:
%%      Initialize the identity matrix (DWork4) if the block is configured
%%      as a matrix multiplication/inversion where the last data input port
%%      has a matrix inversion operator specified.
%%
%function StartClassic(block, system) Output
  %if ParamSettings.Multiplication == "Matrix(*)"
    %if ParamSettings.OneInputMultiply == "no"
      %% The following tlc code assumes the identity matrix has same 
      %% dimensionality of first matrix operation.  If this assumption changes
      %% in the future, the dimensionality must be calculated 
      %% (square-root of size of dwork) or written to .rtw file
      %assign inputs = ParamSettings.Inputs
      %assign inputsSize = SIZE(inputs)
      %if inputs[inputsSize[1]-1] == "/"
        %assign dwIdx = 3   %% %<SLibMatrixOperand(-4)>
        %assign dwork = DWork[dwIdx]
        %assign dworkAddr = LibBlockDWorkAddr(dwork, "", "", 0)
        %assign width = LibBlockDWorkWidth(dwork)
	%assign dTypeId = LibBlockOutputSignalAliasedThruDataTypeId(0)
	/* Create Identity Matrix for Block: '%<Name>' */
        {
	  int_T i;
	%if dTypeId == tSS_DOUBLE
	  real_T *dWork = %<dworkAddr>;
        %else
	  real32_T *dWork = %<dworkAddr>;
	%endif
          for (i = 0; i < %<width>; i++) {
            *dWork++ = 0.0;
          }
          %assign dims = ParamSettings.Dimensions[0]
          %assign matrixWidth = dims[0]*dims[0]
          dWork = %<dworkAddr>;
          while( dWork < %<dworkAddr>+%<matrixWidth>){
            *dWork = 1;
            dWork += %<dims[0]+1>;
          }
        }
      %endif
    %endif
  %endif
%endfunction %% Start

%% Function: Start ==============================================================
%% Abstract:
%%      Initialize the identity matrix (DWork4) if the block is configured
%%      as a matrix multiplication/inversion where the last data input port
%%      has a matrix inversion operator specified.
%%
%function Start(block, system) Output
  %if block.InFixptMode
    %%
  %else
    %<StartClassic(block, system)>
  %endif
%endfunction




%% Function: Outputslassic ==========================================================
%% Abstract:
%%      How this block operates depends on whether it has a single input or
%%      multiple inputs.  For the single input case, it produces a scalar
%%      output consisting of the product of the elements of the input vector.
%%      For the multi-input case, it behaves as the dual of the "sum" block.
%%      Thus each port can be labeled as a multiply (*) or a divide (/).
%%      Each element of the output vector is then composed of the product
%%      or reciprocal of each corresponding input element.
%%
%%      The inputs can be of any type except boolean and may be complex.
%function OutputsClassic(block, system) Output
  %if ParamSettings.Multiplication == "Element-wise(.*)"
    %assign doSaturate = SLibHandleSaturateOnOverflow(block)
    %%
    %assign outputIsComplex = LibBlockOutputSignalIsComplex(0)
    %if (!outputIsComplex)
      %if (LibBlockNumInputPorts(block) == 1)
	%<RealVectorProduct(block, system, doSaturate)>\
      %else
	%<RealParallelProduct(block, system, doSaturate)>\
      %endif
    %else
      %if (LibBlockNumInputPorts(block) == 1)
	%<ComplexVectorProduct(block, system, doSaturate)>\
      %else
	%<ComplexParallelProduct(block, system, doSaturate)>\
      %endif
    %endif
  %else
    %if ParamSettings.OneInputMultiply == "no"
      {
      %% Perform matrix multiplication
      %assign ops = ParamSettings.OperandComplexity
      %assign opsSize = SIZE(ops)
      %assign operators = ParamSettings.Operators
      %assign numMulSteps = opsSize[1]
      %assign Dims = ParamSettings.Dimensions
      %%
      %assign dimsLength = numMulSteps * 3
      %%
      static const int_T dims[%<dimsLength>] = { \
      %foreach matOp = numMulSteps
	%assign dims = Dims[matOp]
	 %<dims[0]>, %<dims[1]>, %<dims[2]> \
	%if matOp != (numMulSteps-1)
	  , \
	%endif
      %endforeach
      };
      %%
      %assign allPortReal = TLC_TRUE
      %assign allPortComplex = TLC_TRUE
      %%
      %foreach iIdx = NumDataInputPorts
	%%
	%if LibBlockInputSignalIsComplex(iIdx)
	  %assign allPortReal = TLC_FALSE
	%else
	  %assign allPortComplex = TLC_FALSE
	%endif
	%%
      %endforeach
      %%
      %assign dTypeId = LibBlockOutputSignalAliasedThruDataTypeId(0)
      %assign dType   = [%<LibGetDataTypeNameFromId(dTypeId)>, ...
	%<LibGetDataTypeComplexNameFromId(dTypeId)>]
      %if dTypeId == tSS_DOUBLE
	%assign fcnNameType = "_Dbl"
      %else
	%assign fcnNameType = "_Sgl"
      %endif
      %foreach matOp = numMulSteps
	%assign fcnName = "%<ops[matOp]>%<fcnNameType>"
	%assign operand = ParamSettings.Operands[matOp]
	%assign complexity = ParamSettings.Complexities[matOp]
	%%
	%assign y = SLibMatrixOperand(block, operand[0])
	%assign a = SLibMatrixOperand(block, operand[1])
	%assign b = SLibMatrixOperand(block, operand[2])
	%% We do not need cast if
	%%  1. all port are real, OR
	%%  2. all port complex and it is not dwork
	%%
	%% We need cast if
	%%   1. it is dwork and not all port real, OR
	%%   2. numeric type is heterogeneous
	%%
	%if allPortReal || (operand[0] >= 0 && allPortComplex)
	  %assign dTy = ""
	%else 
	  %% DWORK needs cast	  
	  %assign dTy = "(%<dType[complexity[0]]>*)"
	%endif
	%%  
	%if allPortReal || (operand[1] >= 0 && allPortComplex)
	  %if operand[1] > 0
	    %% inputs
	    %assign inTypeName = LibBlockInputSignalDataTypeName(operand[1]-1, "")
	    %%
	    %if inTypeName == dType[complexity[1]]
	      %%
	      %assign portObj = FcnGetInputPortRecord(operand[1]-1)
	      %assign sigRec  = SLibGetSourceRecord(portObj, 0)
	      %%
	      %if sigRec.Invariant != "yes"
		%assign dTa = ""
	      %else 
		%assign dTa = "(%<dType[complexity[1]]>*)"
	      %endif
	    %else
	      %assign dTa = "(%<dType[complexity[1]]>*)"
	    %endif
	  %else
	    %% output or dwork
	    %assign dTa = ""
	  %endif
	  %%
	%else 
	  %% DWORK and not all real input needs cast	  
	  %assign dTa = "(%<dType[complexity[1]]>*)"
	%endif
	%%
	%if allPortReal || (operand[2] >= 0 && allPortComplex)
	  %%
	  %if operand[2] > 0
	    %% input could be invariant
	    %assign portObj = FcnGetInputPortRecord(operand[2]-1)
	    %assign sigRec  = SLibGetSourceRecord(portObj, 0)
	    %%
	    %if sigRec.Invariant != "yes"
	      %assign dTb = ""
	    %else 
	      %assign dTb = "(%<dType[complexity[1]]>*)"
	    %endif
	  %else
	    %% output or dwork
	    %assign dTb = ""
	  %endif
	%else 
	  %% DWORK needs cast
	  %assign dTb = "(%<dType[complexity[2]]>*)"
	%endif
	%%
	%assign curIdxForDims = matOp * 3
	%%
	%if operators[matOp] == "*"

      %% call TFL query to generate proper rt_ function
      %% rt_MatMult%<fcnName>(%<dTy>%<y>, %<dTa>%<a>, %<dTb>%<b>, &dims[%<curIdxForDims>]);
      %createrecord FcnRec{Name "rt_MatMult"; NumArgs 4}
      %addtorecord FcnRec ArgList{Expr "%<dTy>%<y>"; TypeId dTypeId; IsPtr 1; IsCplx complexity[0]; IsConst 0}
      %addtorecord FcnRec ArgList{Expr " %<dTa>%<a>"; TypeId dTypeId; IsPtr 1; IsCplx complexity[1]; IsConst 0}
      %addtorecord FcnRec ArgList{Expr " %<dTb>%<b>"; TypeId dTypeId; IsPtr 1; IsCplx complexity[2]; IsConst 0}
      %addtorecord FcnRec ArgList{Expr " &dims[%<curIdxForDims>]"; TypeId tSS_INTEGER; IsPtr 1; IsCplx 0; IsConst 0}
      %<LibGenFcnCall(FcnRec, 0)>;
	  
	%else
	  %assign divBufs = ParamSettings.DivisionBuffers
	  %assign lu  = SLibMatrixOperand(block, divBufs[0])
	  %assign piv = SLibMatrixOperand(block, divBufs[1])
	  %assign x   = SLibMatrixOperand(block, divBufs[2])
	  %% DWORK needs cast
	  %assign dTlu = "(%<dType[complexity[1]]>*)"
	  %assign dTx  = "(%<dType[complexity[0]]>*)"

      %% call TFL query to generate proper rt_ function
	  %% rt_MatDiv%<fcnName>(%<dTy>%<y>, %<dTa>%<a>, %<dTb>%<b>,%<dTlu>%<lu>, %<piv>, %<dTx>%<x>, &dims[%<curIdxForDims>]);
      %createrecord FcnRec{Name "rt_MatDiv"; NumArgs 7}
      %addtorecord FcnRec ArgList{Expr "%<dTy>%<y>"; TypeId dTypeId; IsPtr 1; IsCplx complexity[0]; IsConst 0}
      %addtorecord FcnRec ArgList{Expr " %<dTa>%<a>"; TypeId dTypeId; IsPtr 1; IsCplx complexity[1]; IsConst 0}
      %addtorecord FcnRec ArgList{Expr " %<dTb>%<b>"; TypeId dTypeId; IsPtr 1; IsCplx complexity[2]; IsConst 0}
      %addtorecord FcnRec ArgList{Expr " %<dTlu>%<lu>"; TypeId dTypeId; IsPtr 1; IsCplx complexity[1]; IsConst 0}
      %addtorecord FcnRec ArgList{Expr " %<piv>"; TypeId tSS_INT32; IsPtr 1; IsCplx 0; IsConst 0}
      %addtorecord FcnRec ArgList{Expr " %<dTx>%<x>"; TypeId dTypeId; IsPtr 1; IsCplx complexity[0]; IsConst 0}
      %addtorecord FcnRec ArgList{Expr " &dims[%<curIdxForDims>]"; TypeId tSS_INTEGER; IsPtr 1; IsCplx 0; IsConst 0}
      %<LibGenFcnCall(FcnRec, 0)>;

	%endif
	%%
      %endforeach
      }
    %else
      %% Input is direct feedthrough to output
      %% Copy input to output unless buffer is re-used
      %assign u0 = LibBlockInputSignalAddr(0, "", "", 0)
      %assign y = LibBlockOutputSignalAddr(0, "", "", 0)
      %assign inputDataType = LibBlockInputSignalDataTypeName(0, "")
      %assign width = LibGetRecordWidth(DataInputPort[0])
      %if (%<LibBlockInputSignalBufferDstPort(0)> != 0)
	(void) %<LibGenMemFcnCall("memcpy", y, u0, ...
	  "%<width> * sizeof(%<inputDataType>)")>;
      %endif
    %endif
  %endif
  
%endfunction


%% Function: Outputs ===============================================
%% Abstract:
%% 	Output function
%%
%function Outputs(block, system) Output
  %if block.InFixptMode
  %else
    %<OutputsClassic(block, system)>
  %endif
%endfunction


%% Function: RealVectorProduct ================================================
%% Abstract:
%%       Generates code for doing a vector multiply (or divide) for a real
%%       signal of width >= 1 (for all data types).
%% Synopsis:
%%       RealVectorProduct(block, system, doSaturate)
%%         block - block record
%%         system - system record
%%         doSaturate - Saturation flag for integer inputs
%function RealVectorProduct(block, system, doSaturate) Output
  %% Block is configured as a vector multiplier (1 input port)
  %assign outputDataType = LibBlockOutputSignalAliasedThruDataTypeId(0)
  %assign y = LibBlockOutputSignal(0, "", "", 0)
  %assign u = LibBlockInputSignal(0, "", "", 0)
  %assign Ops = ParamSettings.Inputs
  %assign zero = SLibGetFormattedValueFromId(outputDataType, 0)
  %assign one = SLibGetFormattedValueFromId(outputDataType, 1)
  %if (!doSaturate)
    %if Ops[0] == "/"
      %assign outstr = "%<one> / ("
    %else
      %assign outstr = ""
    %endif
    %assign outstr = outstr + "%<u>"
    %if LibBlockInputSignalWidth(0) > 1
      %assign rollVars = ["U"]
      %assign rollRegions1 = LibGetRollRegions1(RollRegions)
      %foreach elt = LibBlockInputSignalWidth(0) - 1
	%assign u = LibBlockInputSignal (0, "", "", elt+1)
	%assign outstr = outstr + " * " + "\n%<u>"
      %endforeach
    %endif
    %if Ops[0] == "/"
      %assign outstr = outstr + " )"
    %endif
    %<y> = %<outstr>;
  %else
    %if LibBlockInputSignalWidth(0) == 1
      %if Ops[0] == "*"
        %if (y == u)
          %% We no longer show eliminated statements
        %else
          %<y> = %<u>;
        %endif
      %else
        %<RealDivide("%<one>", u, y, doSaturate)>\
      %endif
    %else
      %assign outputDTname = LibBlockOutputSignalDataTypeName(0, "")
      {
      %<outputDTname> output = %<u>;
      \
        %assign rollVars = ["U"]
        %assign rollRegions1 = LibGetRollRegions1(RollRegions)
        %roll sigIdx = rollRegions1, lcv = RollThreshold, block, "Roller", rollVars
          %assign u = LibBlockInputSignal(0, "", lcv, sigIdx)
          %<RealMultiply("output", u, "output", doSaturate)>\
        %endroll
        %if Ops[0] == "*"
          %<y> = output;
        %else
          %<RealDivide("%<one>", "output", y, doSaturate)>\
        %endif
      }
    %endif
  %endif
%endfunction

%% Function: RealParallelProduct ==============================================
%% Abstract:
%%       Generates code for doing a parallel multiply (or divide) for real
%%       signals of width >= 1 (for all data types).
%% Synopsis:
%%       RealParallelProduct(block, system, doSaturate)
%%         block - block record
%%         system - system record
%%         doSaturate - Saturation flag for integer inputs
%function RealParallelProduct (block, system, doSaturate) Output
  %% Block is configured as a parallel multiplier (n input ports, n > 1)
  %assign outputDataType = LibBlockOutputSignalAliasedThruDataTypeId(0)
  %assign outputDTname = LibBlockOutputSignalAliasedThruDataTypeName(0, "")
  %assign Ops = ParamSettings.Inputs
  %assign zero = SLibGetFormattedValueFromId(outputDataType, 0)
  %assign one = SLibGetFormattedValueFromId(outputDataType, 1)
  %if (!doSaturate)
    %%
    %assign rollVars = ["U", "Y"]
    %roll sigIdx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
      %assign y = LibBlockOutputSignal(0, "", lcv, sigIdx)
      %assign u = LibBlockInputSignal(0, "", lcv, sigIdx)
      %%
      %if Ops[0] == "*"
        %assign outstr = ""
      %else
        %assign outstr = "%<one> / "
      %endif
      %%
      %assign outstr = outstr + "%<u>"
      %foreach port = LibBlockNumInputPorts(block) - 1
        %assign ip = port + 1
	%assign u = LibBlockInputSignal(ip, "", lcv, sigIdx)
        %if (Ops[ip] == "*") 
          %assign outstr = outstr + " * " + u
        %else
          %assign outstr = outstr + " / " + u
        %endif
      %endforeach
      %%
      %<y> = %<outstr>;
    %endroll
  %else
    %assign rollVars = ["U", "Y"]
    %roll sigIdx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
      %assign y = LibBlockOutputSignal(0, "", lcv, sigIdx)
      %assign u = LibBlockInputSignal (0, "", lcv, sigIdx)
      %% Note that we must use the temporary variable 'output' for the
      %% cases that we have buffer reuse.
      %% To see why, consider the case that you have two input ports
      %% and the buffer of the second port is reused.  If y
      %% is assigned the value of port 1, it will overwrite the value
      %% in port two (the shared buffer) thus destroying the information
      %% before it is used.
      {
      %if (Ops[0] == "*")
        %<outputDTname> output = %<u>;
      %else
        %assign dDT = FixPt_GetOutputDataType(0)
        %<FixPt_Division(output, dDT ,...
          "%<one>", dDT,...
          u, dDT,...
          "Zero","Saturate")>\
      %endif
      %%
      \
        %<FcnEmulateResultForDSP32(outputDataType,"output")>\
        %foreach port = LibBlockNumInputPorts(block) - 1
          %assign ip = port + 1
          %assign u = LibBlockInputSignal (ip, "", lcv, sigIdx)
          %if (Ops[ip] == "*") 
            %<RealMultiply("output", u, "output", doSaturate)>\
          %else
            %<RealDivide("output", u, "output", doSaturate)>\
          %endif
        %endforeach
        %<y> = output;
      }
    %endroll
  %endif
%endfunction

%% Function: RealDivide ========================================================
%% Abstract:
%%       Generates code (for a divide) that stands by it self.
%%       Takes into account data types and the doSaturate flag.
%% Synopsis:
%%       RealDivide (a, b, output, doSaturate)
%%       where
%%       a - the numerator,
%%       b - the denominator.
%%       output - output variable
%%       doSaturate - Saturation flag for integer inputs
%%       a, b, and output are all assumed to be non-empty strings.
%%
%%       %<RealDivide(a,b,"x")>\
%%       would result in
%%       x = (%<a>)/(%<b>) when the output data type is a floating point or
%%                          the doSaturate flag is not set.
%%       x = SaturateDivide_<DT>(a,b) when the output data type is an integer
%%                          and the doSaturate flag is set.
%%       For C:
%%         If a == output,
%%         generated code is
%%         %<output> = %<output> / %<b>;
%function RealDivide (a, b, output, doSaturate) Output
  %assign outputDataType = LibBlockOutputSignalAliasedThruDataTypeId(0)
  %assign outputDTname = LibBlockOutputSignalAliasedThruDataTypeName(0, "%<tRealPart>")
  %assign zero = SLibGetFormattedValueFromId(outputDataType, 0)
  %if (!doSaturate)
    %% No overflow checking
    %if (output == a)
      %<output> = %<output> / %<b>;
    %else
      %<output> = (%<a>) / (%<b>);
    %endif
  %else
    %assign dDT = FixPt_GetOutputDataType(0)
    %<FixPt_Division(output, dDT ,...
      a, dDT,...
      b, dDT,...
      "Zero","Saturate")>\
  %endif
%endfunction

%% Function: RealDivideInitial ===============================================
%% Abstract:
%%       Generates code (for a divide) that can be assigned to a variable.
%%       Takes into account data types and the doSaturate flag.
%%       This function is meant for use of variable initialization/declaration
%%       i.e.
%%       one could declare
%%       real_T x = %<RealDivideInitial(a,b, doSaturate)>;
%% Synopsis:
%%       RealDivideInitial (a, b, doSaturate)
%%       where
%%       a - the numerator,
%%       b - the denominator.
%%       doSaturate - Saturation flag for integer inputs
%%       a and b are assumed to be non-empty strings.
%%
%%       x = %<RealDivideInitial(a,b, doSaturate)>;
%%       would result in
%%       x = (%<a>)/(%<b>) when the output data type is a floating point or
%%                          the doSaturate flag is not set.
%%       x = SaturateDivide_<DT>(a,b) when the output data type is an integer
%%                          and the doSaturate flag is set.
%function RealDivideInitial (a, b, doSaturate) Output
  %assign outputDataType = LibBlockOutputSignalAliasedThruDataTypeId(0)
  %assign outputDTname = LibBlockOutputSignalAliasedThruDataTypeName(0, "%<tRealPart>")
  %assign zero = SLibGetFormattedValueFromId(outputDataType, 0)
  %if (!doSaturate)
    %% No overflow checking
    (%<a>) / (%<b>)\
  %else
    SaturateDivide_%<outputDTname> (%<a>, %<b>)\
  %endif
%endfunction

%% Function: ComplexVectorProduct =============================================
%% Abstract:
%%       Generates code for doing a vector multiply (or divide) for a complex
%%       signal of width >= 1 (for all data types).
%% Synopsis:
%%       ComplexVectorProduct(block, system, doSaturate)
%%         block - block record
%%         system - system record
%%         doSaturate - Saturation flag for integer inputs
%function ComplexVectorProduct (block, system, doSaturate) Output
  %% Block is configured as a vector multiplier (1 input port)
  %assign outputDataType = LibBlockOutputSignalAliasedThruDataTypeId(0)
  %assign y = LibBlockOutputSignal(0, "", "", 0)
  %assign u = LibBlockInputSignal(0, "", "", 0)
  %assign Ops = ParamSettings.Inputs
  %assign zero = SLibGetFormattedValueFromId(outputDataType, 0)  
  %if LibBlockInputSignalWidth(0) == 1
    %if Ops[0] == "*"
      %if (y == u)
        %% We no longer show eliminated statements
      %else
        %<y> = %<u>;
      %endif
    %else
      %assign ur = LibBlockInputSignal (0, "", "", "%<tRealPart>0")      
      %assign ui = LibBlockInputSignal (0, "", "", "%<tImagPart>0")
      %assign yr = LibBlockOutputSignal(0, "", "", "%<tRealPart>0")
      %assign yi = LibBlockOutputSignal(0, "", "", "%<tImagPart>0")
      %%
      %<ComplexReciprocal(ur, ui, yr, yi, doSaturate)>\
    %endif
  %else
    %assign outputDTname = LibBlockOutputSignalAliasedThruDataTypeName(0, "")
    %assign outputDTnameRe = LibBlockOutputSignalAliasedThruDataTypeName(0, "%<tRealPart>")
    {
    %<outputDTname> output = %<u>;
    %%
    \
      %assign rollVars = ["U"]
      %assign rollRegions1 = LibGetRollRegions1(RollRegions)
      %roll sigIdx = rollRegions1, lcv = RollThreshold, block, "Roller", rollVars
        %assign ur = LibBlockInputSignal(0, "", lcv, "%<tRealPart>%<sigIdx>")
        %assign ui = LibBlockInputSignal(0, "", lcv, "%<tImagPart>%<sigIdx>")   
        %<ComplexMultiply("output.re", "output.im", ur, ui, "output.re", "output.im", doSaturate, 1)>\
      %endroll
      %if Ops[0] == "*"
        %<y> = output;
      %else
        %assign yr = LibBlockOutputSignal(0, "", "", "%<tRealPart>0")
        %assign yi = LibBlockOutputSignal(0, "", "", "%<tImagPart>0")
        %<ComplexReciprocal("output.re", "output.im", yr, yi, doSaturate)>\
      %endif
    }
  %endif
%endfunction

%% Function: ComplexParallelProduct ===========================================
%% Abstract:
%%       Generates code for doing a parallel multiply (or divide) for complex
%%       signals of width >= 1 (for all data types).
%% Synopsis:
%%       ComplexParallelProduct(block, system, doSaturate)
%%         block - block record
%%         system - system record
%%         doSaturate - Saturation flag for integer inputs
%function ComplexParallelProduct (block, system, doSaturate) Output
  %% Block is configured as a parallel multiplier (n input ports, n > 1)
  %assign rollVars = ["U", "Y"]
  %assign outputDTname = LibBlockOutputSignalAliasedThruDataTypeName(0, "")
  %assign outputDataType = LibGetDataTypeIdAliasedThruToFromId(...
    LibBlockOutputSignalDataTypeId(0))
  %assign Ops = ParamSettings.Inputs
  %assign zero = SLibGetFormattedValueFromId(outputDataType, 0)
  {
  %<outputDTname> output;
  %%
  \
  %roll sigIdx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
    %assign y = LibBlockOutputSignal(0, "", lcv, sigIdx)
    %assign u = LibBlockInputSignal (0, "", lcv, sigIdx)    
    %assign ur = LibBlockInputSignal(0, "", lcv, "%<tRealPart>%<sigIdx>")
    %assign ui = LibBlockInputSignal(0, "", lcv, "%<tImagPart>%<sigIdx>")       
    %if Ops[0] == "*"
      %if (ui != "")
        output = %<u>;
      %else
        output.re = %<ur>;
        output.im = %<zero>;
      %endif
    %else
      %<ComplexReciprocal (ur, ui, "output.re", "output.im", doSaturate)>\
    %endif
    %foreach port = LibBlockNumInputPorts(block) - 1
      %assign ip = port + 1
      %assign ur = LibBlockInputSignal(ip, "", lcv, "%<tRealPart>%<sigIdx>")
      %assign ui = LibBlockInputSignal(ip, "", lcv, "%<tImagPart>%<sigIdx>")    
      %if (Ops[ip] == "*") 
        %<ComplexMultiply("output.re", "output.im", ur, ui, "output.re", "output.im", doSaturate, 1)>\
      %else
        %<ComplexDivide("output.re", "output.im", ur, ui, "output.re", "output.im", doSaturate)>\
      %endif
    %endforeach
    %<y> = output;
  %endroll
  }
%endfunction

%% Function: ComplexReciprocal ================================================
%% Abstract:
%%       Generates code to output the reciprocal of a complex number.
%% Synopsis:
%%       ComplexReciprocal (re, im, output_re, output_im, doSaturate)
%%         results in:
%%           output_re + i*output_im <-- 1/(re + i * im)
%%
%%         re - Real part of complex number
%%         im - Imaginary part of complex number
%%         output_re - Real part of complex number which will hold result
%%         output_im - Imaginary part of complex number which will hold result
%%         doSaturate - Saturation flag for integer inputs
%%
%%         re, im may be empty strings.  In these cases, they are treated as
%%         if they are equal to zero.
%function ComplexReciprocal (re, im, output_re, output_im, doSaturate) Output
  %assign outputDataType = LibBlockOutputSignalAliasedThruDataTypeId(0)
  %assign outputDTnameRe  = LibBlockOutputSignalAliasedThruDataTypeName(0, "%<tRealPart>")  
  %assign zero = SLibGetFormattedValueFromId(outputDataType, 0)
  %assign one = SLibGetFormattedValueFromId(outputDataType, 1)  
  %switch (outputDataType)
    %case (tSS_DOUBLE)
    %case (tSS_SINGLE)
      %if (ISEQUAL(im, ""))
        %<output_re> = %<one>/(%<re>);
        %<output_im> = %<zero>;
      %else
        if (%<im> == %<zero>) {
          %<output_re> = %<one>/(%<re>);
          %<output_im> = %<zero>;
        } else {
          {
          %<outputDTnameRe> s = \
            (%<outputDTnameRe>)(%<LibGenMathFcnCall("abs",tSS_DOUBLE,"(real_T)%<re>","")> + \
                                %<LibGenMathFcnCall("abs",tSS_DOUBLE,"(real_T)%<im>","")>);
          %<outputDTnameRe> ars = %<one>/s;
          %<outputDTnameRe> brs = %<re>/s;
          %<outputDTnameRe> bis = %<im>/s;
          %<outputDTnameRe> d   = (brs * brs + bis * bis);
          \
            %<output_re> = (ars * brs)/d;
            %<output_im> = (%<zero> - (ars * bis))/d;
          }
        }
      %endif
      %break
    %case (tSS_INT8)
    %case (tSS_INT16)
    %case (tSS_INT32)
    %case (tSS_UINT8)
    %case (tSS_UINT16)
    %case (tSS_UINT32)
      %if (ISEQUAL(im, ""))
        %<RealDivide ("%<one>", re, output_re, doSaturate)>\
        %<output_im> = %<zero>;
      %else
        if (%<im> == %<zero>) {
          %<RealDivide ("%<one>", re, output_re, doSaturate)>\
          %<output_im> = %<zero>;
        } else {
          {
            %<outputDTnameRe> d;
          \
            %% d = a*a + b*b
            %if (!doSaturate)
              d = %<re> * %<re> + %<im> * %<im>;
            %else
              {
              %<outputDTnameRe> tmp1;
              %<outputDTnameRe> tmp2;         
              \
              %assign dDT = FixPt_GetOutputDataType(0)
              %<FixPt_Multiply("tmp1", dDT ,...
                re, dDT,...
                re, dDT,...
                "Zero","Saturate")>\
              %<FixPt_Multiply("tmp2", dDT ,...
                im, dDT,...
                im, dDT,...
                "Zero","Saturate")>\
              %<SLibSumWithSaturate (outputDataType, "+", "d", "tmp1", "tmp2", "")>\
            }
            %endif
            %<RealDivide (re, "d", output_re, doSaturate)>\
            %if (outputDataType == tSS_INT8 || ...
              outputDataType == tSS_INT16 || ...
              outputDataType == tSS_INT32)
              %% Note:
              %% 1) The division MUST be done before the negation since
              %% this is the order of operations within Simulink.
              %% 2) RealDivideInitial takes care of generating appropriate code
              %% depending on the doSaturate flag.
              %% 3) The quantity %<im>/d can never be MIN_int_(8|16|32) and so does
              %% not require any saturation code for the negation.
              %% Here's why:
              %% Let the input be a+b*i.  Then, the output is
              %%    a/(a^2+b^2) - b*i/(a^2+b^2)
              %% Saturation code is required only if the quantity
              %% b/(a^2+b^2) can take on the value MIN_int_*
              %% which in turn requires that (a^2+b^2) must be 1 and b must be MIN_int_*
              %% These two conditions cannot be satisfied simultaneously.  Hence, no
              %% saturation code is required for the negation.
              %assign dDT = FixPt_GetOutputDataType(0)
              %<FixPt_Division(output_im, dDT ,...
                im, dDT,...
                "d", dDT,...
                "Zero","Saturate")>\
              %<output_im> = -(%<output_im>);
              %<FcnEmulateResultForDSP32(outputDataType,output_im)>\
            %else
              %% If an unsigned data type, then the imaginary part of the output is
              %% always 0 (by definition).
              %<output_im> = %<zero>;
            %endif
          }
        }
      %endif
      %break
    %default
      %%START_ASSERT
      %assign errTxt = "Invalid data type specified, " ...
        "%<LibGetDataTypeNameFromId(outputDataType)>."
      %<LibBlockReportError([], errTxt)>
      %%END_ASSERT
  %endswitch
%endfunction

%% Function: ComplexDivide ====================================================
%% Abstract:
%%       Generates code to divide two complex numbers.
%% Synopsis:
%%       ComplexDivide (a, b, c, d, output_re, output_im, doSaturate)
%%         results in:
%%         output_re + i*output_im <-- (a + i*b)/(c + i * d)
%%
%%         a - Real part of numerator
%%         b - Imaginary part of numerator
%%         c - Real part of denominator
%%         d - Imaginary part of denominator
%%         output_re - Real part of complex number which will hold result
%%         output_im - Imaginary part of complex number which will hold result
%%         doSaturate - Saturation flag for integer inputs
%function ComplexDivide (a, b, c, d, output_re, output_im, doSaturate) Output
  %assign outputDataType = LibBlockOutputSignalAliasedThruDataTypeId(0)
  %assign outputDTname = LibBlockOutputSignalAliasedThruDataTypeName(0, "")
  %assign outputDTnameRe = LibBlockOutputSignalAliasedThruDataTypeName(0, "%<tRealPart>")
  %assign zero = SLibGetFormattedValueFromId(outputDataType, 0)
  %%
  %switch (outputDataType)
    %case (tSS_DOUBLE)
    %case (tSS_SINGLE)
      %if (ISEQUAL(d, ""))
        %<RealDivide(a, c, output_re, doSaturate)>\
        %<RealDivide(b, c, output_im, doSaturate)>\
      %else
        %% Neither c nor d is null.  Use standard MATLAB algorithm.
        if (%<d> == %<zero>) {
          %<RealDivide (a, c, output_re, doSaturate)>\
          %<RealDivide (b, c, output_im, doSaturate)>\
        } else {
          {
          %<outputDTnameRe> s = \
          (%<outputDTnameRe>)(%<LibGenMathFcnCall("abs",tSS_DOUBLE,"(real_T)%<c>","")> + \
                              %<LibGenMathFcnCall("abs", tSS_DOUBLE, "(real_T)%<d>","")>);
          %<outputDTnameRe> ars = (%<a>)/s;
          %<outputDTnameRe> ais = (%<b>)/s;      
          %<outputDTnameRe> brs = (%<c>)/s;
          %<outputDTnameRe> bis = (%<d>)/s;
          %<outputDTnameRe> d   = (brs * brs + bis * bis);
          \  
            %<output_re> = (ars * brs + ais * bis)/d;
            %<output_im> = (ais * brs - ars * bis)/d;
          }
        }
      %endif
      %break
    %case (tSS_INT8)
    %case (tSS_INT16)
    %case (tSS_INT32)
    %case (tSS_UINT8)
    %case (tSS_UINT16)
    %case (tSS_UINT32)
      %if (ISEQUAL(d, ""))
        %<RealDivide (a, c, output_re, doSaturate)>\
        %<RealDivide (b, c, output_im, doSaturate)>\
      %else
        %% All numerator and denominator coefficients are non-null
        %% d = c*c + d*d
        if (%<d> == %<zero>) {
          %<RealDivide (a, c, output_re, doSaturate)>\
          %<RealDivide (b, c, output_im, doSaturate)>\
        } else {
          {
          %<outputDTnameRe> d;
          \
            %% Compute the denominator
            %if (!doSaturate)
              d = %<c> * %<c> + %<d> * %<d>;
            %else
              {
              %<outputDTnameRe> tmp1;
              %<outputDTnameRe> tmp2;
              \
                %<RealMultiply(c, c, "tmp1", doSaturate)>\
                %<RealMultiply(d, d, "tmp2", doSaturate)>\
                %<SLibSumWithSaturate(outputDataType, "+", "d", "tmp1", "tmp2", "")>\
              }
            %endif
            %%
            %if (doSaturate)
              {
              %% tmp = (a+bi)*(c-di) = (a*c + b*d) + (b*c - a*d)
              %<outputDTname> tmp;
              %<outputDTnameRe> tmp1;
              %<outputDTnameRe> tmp2;     
              \
              %assign dDT = FixPt_GetOutputDataType(0)
              %<FixPt_Multiply("tmp1", dDT ,...
                a, dDT,...
                c, dDT,...
                "Zero","Saturate")>\
              %<FixPt_Multiply("tmp2", dDT ,...
                b, dDT,...
                d, dDT,...
                "Zero","Saturate")>\
              %<SLibSumWithSaturate(outputDataType, "+", "tmp.re", "tmp1", "tmp2", "")>\
              %<FixPt_Multiply("tmp1", dDT ,...
                b, dDT,...
                c, dDT,...
                "Zero","Saturate")>\
              %<FixPt_Multiply("tmp2", dDT ,...
                a, dDT,...
                d, dDT,...
                "Zero","Saturate")>\
              %<SLibSumWithSaturate(outputDataType, "-", "tmp.im", "tmp1", "tmp2", "")>\
              %<RealDivide ("tmp.re", "d", output_re, doSaturate)>\
              %<RealDivide ("tmp.im", "d", output_im, doSaturate)>\
              }
            %else
	      %if (output_re == a)
		{
		%<outputDTnameRe>  tmp = %<output_re>;
		\
		tmp = (%<a> * %<c> + %<b> * %<d>)/d;
		%<output_im> = (%<b> * %<c> - %<a> * %<d>)/d;
		%<output_re> = tmp;
		}
	      %else
                %%START_ASSERT
		%<output_re> = (%<a> * %<c> + %<b> * %<d>)/d;
		%<output_im> = (%<b> * %<c> - %<a> * %<d>)/d;
                %%END_ASSERT
	      %endif
            %endif
          }
        }
      %endif
      %break
    %default
      %%START_ASSERT
      %assign errTxt = "Invalid data type specified, " ...
        "%<LibGetDataTypeNameFromId(outputDataType)>."
      %<LibBlockReportError([], errTxt)>
      %%END_ASSERT
  %endswitch
%endfunction

%% [EOF] product.tlc
