%% $Revision: 1.1.6.20 $
%% 
%% Copyright 1994-2010 The MathWorks, Inc.
%%
%% Abstract: From File block
%%
%%      There are two different ways in which FromFile generates code:
%%
%%          1) Using the sl_fileio module for incremental reading
%%          2) Loading the whole MAT-File into memory at code generation
%%
%%      For host-based simulation targets (RSim, Raccel, SL Accelerator,
%%      and Model Reference SimTarget), the sl_fileio module can be linked
%%      into the generated code and used to read MAT-Files from disk
%%      incrementally.  The sl_fileio module can determine whether or not
%%      incremental reading is possible (as from an HDF5 v7.3 MAT-File) or
%%      whether the entire contents of the MAT-File must be read into memory
%%      (as from a v4 or v5 MAT-File).  The sl_fileio module hides this
%%      part so that the generated code simply interfaces to the sl_fileio
%%      API and does not care if it is reading incrementally or not.
%%
%%      For other targets (grt, ert, real-time targets, etc.), the sl_fileio
%%      cannot be linked into the generated code.  Instead, the contents of
%%      the MAT-File are dumped into the .rtw file and generated directly
%%      into the code during MdlStartup.
%%
%%      RSim (and Raccel) allow for the FromFile MAT-File to be remapped
%%      at the command-line when the executable is spawned.  For both 1)
%%      and 2) it is possible to remap the MAT-File and check that the new
%%      MAT-File is consistent with the model.
%%

%implements FromFile "C"

%% Function: BlockTypeSetup ===================================================
%% Abstract:
%%
%function BlockTypeSetup(block, system) void
  %if ParamSettings.useIncrRead
    %%
    %% Use sl_fileio module for incremental reading of MAT-Files
    %%
    %<SLibAddToCommonIncludes("sl_fileio_rtw.h")>
    %return ""
  %endif
%endfunction
  
%% Start ======================================================================
%% Abstract:
%%      Load the from file .mat data into a PWork pointer
%%
%function Start(block, system) Output
  {
    %if ParamSettings.useIncrRead
      %assign nulldef = SLibGetNullDefinitionFromTfl()
      %assign fnStr = STRING(ParamSettings.FileName)
      char fileName[%<RTWMaxStringLength>] = "%<fnStr>";
      
      %if isRAccel
        %assign blockPath = STRING(LibGetBlockPath(block))
        const char *blockpath = "%<blockPath>";
      %endif
      
      
      void *fp = %<nulldef>;
      const char *errMsg = %<nulldef>;
      
      %assign dTypeId = LibBlockOutputSignalDataTypeId(0)
      %assign groundValueBin = DataTypes.DataType[dTypeId].GroundValueBin
      %openfile groundValueBuffer
      %assign groundValueBufferData = GENERATE_FORMATTED_VALUE(groundValueBin, "")
      %closefile groundValueBuffer
      unsigned char groundValue[] = %<groundValueBuffer>;
      
      %if isRSim
        %if isRAccel==0
          rt_RSimRemapFromFileName(fileName);
        %endif
      %endif
      
      %% interpolation interface parameters
      %assign extrapolationBeforeFirstDataPointStr = STRING(ParamSettings.ExtrapolationBeforeFirstDataPoint)
      %assign interpolationWithinTimeRangeStr = STRING(ParamSettings.InterpolationWithinTimeRange)
      %assign extrapolationAfterLastDataPointStr = STRING(ParamSettings.ExtrapolationAfterLastDataPoint)
      
      %% zero-crossing parameter
      %assign zeroCrossingSwitch = ParamSettings.ZeroCrossingSwitch
      
      %% fxpBlockProp parameters for fi data interpolation
      %assign hardwareinfoDevType = ParamSettings.HardwareinfoDevType
      %assign hardwareInfoBitsPerCIntegers0 = ParamSettings.HardwareinfoBitsPerCIntegers0
      %assign hardwareInfoBitsPerCIntegers1 = ParamSettings.HardwareinfoBitsPerCIntegers1
      %assign hardwareInfoBitsPerCIntegers2 = ParamSettings.HardwareinfoBitsPerCIntegers2
      %assign hardwareInfoBitsPerCIntegers3 = ParamSettings.HardwareinfoBitsPerCIntegers3
      %assign hardwareinfoDivRounding = ParamSettings.HardwareinfoDivRounding
      %assign fxpDiagnosticOverflow = ParamSettings.FxpDiagnosticOverflow
      %assign fxpBlockPath = STRING(ParamSettings.FxpBlockPath)
      
      %if isRAccel
        rt_RAccelReplaceFromFilename(blockpath,fileName);
      %endif
      
      errMsg = rtwMATFileLoaderCreateInstance(fileName, ...
        %<::CompiledModel.ErrorXMLMode>, ...
        "%<extrapolationBeforeFirstDataPointStr>", ...
        "%<interpolationWithinTimeRangeStr>", ...
        "%<extrapolationAfterLastDataPointStr>", ...
        groundValue, ...
        %<zeroCrossingSwitch>, ...
        %<hardwareinfoDevType>, %<hardwareInfoBitsPerCIntegers0>, ...
        %<hardwareInfoBitsPerCIntegers1>, %<hardwareInfoBitsPerCIntegers2>, ...
        %<hardwareInfoBitsPerCIntegers3>, %<hardwareinfoDivRounding>, ...
        %<fxpDiagnosticOverflow>, "%<fxpBlockPath>", ...
        &fp);
      if (errMsg != %<nulldef>) {
        %<RTMSetErrStat("errMsg")>;
        return;
      }
      
      {
        %% Data type parameters for MAT-File consistency check
        %assign dTypeName    = STRING(ParamSettings.ClassName)
        
        %% fixed-point parameters
        %assign fixedPoint   = ParamSettings.IsFixedPoint
        %assign fxp_mode     = ParamSettings.FixedPoint_Mode
        %assign fxp_isSigned = ParamSettings.FixedPoint_IsSigned
        %assign fxp_wordLen  = ParamSettings.FixedPoint_WordLen
        %assign fxp_slope    = ParamSettings.FixedPoint_Slope
        %assign fxp_fixedExp = ParamSettings.FixedPoint_FixedExp
        %assign fxp_bias     = ParamSettings.FixedPoint_Bias
        
        %% enum parameters
        %if LibIsEnumDataType(dTypeId)
          %assign enumNStrings = FcnGetEnumTypeNumEnums(dTypeId)
          %assign enumStringsInit = "const char *enumStrings[%<enumNStrings>] = {"
          %assign enumValuesInit = "int32_T enumValues[%<enumNStrings>] = {"
          %foreach enumIndex = enumNStrings
            %assign enumString = FcnGetEnumTypeString(dTypeId, enumIndex)
            %assign enumStringsInit = enumStringsInit + "\"%<enumString>\""
            %assign enumValue = FcnGetEnumTypeValue(dTypeId, enumIndex)
            %assign enumValuesInit = enumValuesInit + "%<enumValue>"
            %if enumIndex != enumNStrings-1
              %assign enumStringsInit = enumStringsInit + ", "
              %assign enumValuesInit = enumValuesInit + ", "
            %endif
          %endforeach
          %assign enumStringsInit = enumStringsInit + "};"
          %assign enumValuesInit = enumValuesInit + "};"
          const int enumNStrings = %<enumNStrings>;
          %<enumStringsInit>
          %<enumValuesInit>
        %else
          const int enumNStrings = 0;
          const char **enumStrings = %<nulldef>;
          const int32_T *enumValues = %<nulldef>;
        %endif
            
        %% %assign enumValuesInit = "int32_T enumValues"
        
        %% Signal complexity for MAT-File consistency check
        %assign complex      = LibBlockOutputSignalIsComplex(0)

        %% Signal dimensions for MAT-File consistency check
        %assign nDims        = LibBlockOutputSignalNumDimensions(0)
        %assign dims         = LibBlockOutputSignalDimensions(0)
        %if nDims == 1
          int_T dimensions[1] = {%<dims[0]>};
        %else
          %assign dimsInit = "int_T dimensions[%<nDims>] = {"
          %foreach dimsIdx = nDims
            %assign dimsInit = dimsInit + "%<dims[dimsIdx]>"
            %if dimsIdx != nDims-1
              %assign dimsInit = dimsInit + ", "
            %endif
          %endforeach
          %assign dimsInit = dimsInit + "};"
          %<dimsInit>
        %endif

        errMsg = rtwMATFileLoaderCheckMATFileConsistency(...
          fp, ...
          fileName, ...
          %<::CompiledModel.ErrorXMLMode>, ...
          "%<dTypeName>", ...
          %<nDims>, ...
          dimensions, ...
          %<complex>, ...
          %<fixedPoint>, ...
          %<fxp_mode>, ...
          %<fxp_isSigned>, ...
          %<fxp_wordLen>, ...
          %<fxp_slope>, ...
          %<fxp_fixedExp>, ...
          %<fxp_bias>, ...
          enumNStrings, ...
          enumStrings, ...
          enumValues);
        if (errMsg != %<nulldef>) {
          %<RTMSetErrStat("errMsg")>;
          return;
        }
      }
      
      %<LibBlockPWork(PrevTimePtr,"","",0)> = fp;
    %else
      %if isRSim %% Only occurs when 'FromFileIncrHDF5' feature is disabled, otherwise RSim always uses incremental reading
        %assign ::GBLFrFStartIdx = ::GBLFrFStartIdx + 1
        %assign origFilename = STRING(ParamSettings.FileName)
        %assign width = ParamSettings.Width
        %assign frfIdx = ::GBLFrFStartIdx
        /* Load data from %<origFilename> or different file if remapped */
        const char *result;
        if ((result=rt_RapidReadFromFileBlockMatFile("%<origFilename>",%<width>, ...
          &%<::CompiledModel.Name>_gblFrFInfo[%<frfIdx>])) != %<SLibGetNullDefinitionFromTfl()>) {
          %<RTMSetErrStat("result")>;
          return;
        }
        
        %<LibBlockPWork(PrevTimePtr,"","",0)> = (void *) ...
          %<::CompiledModel.Name>_gblFrFInfo[%<frfIdx>].tuDataMatrix;
      %else
        %%
        %% generate the numbers for the data declaration
        %%
        %assign tmpVar = valuesVecTemp { ...
          Value  ParamSettings.TUdata ; ...
          DataTypeIdx tSS_DOUBLE }
        %assign valuesVecVal = LibPrepParameter(valuesVecTemp)
        %openfile valuesBuffer
        %assign bufferData = ...
          GENERATE_FORMATTED_VALUE(valuesVecVal, "")
        %closefile valuesBuffer
      
        %%
        %% Simulink ensures no non-finite values, declare the (finite) data
        %%
        %assign tuBufferName = "tuData"
        %assign nterms = SIZE(ParamSettings.TUdata,1)
        static const real_T %<tuBufferName>[%<nterms>] = %<valuesBuffer>;

        %<LibBlockPWork(PrevTimePtr,"","",0)> = (void *) &%<tuBufferName>[0];
      %endif
    %endif %% if ParamSettings.useIncrRead
  }
%endfunction


%% Output =====================================================================
%% Abstract:
%%      Output data from specified .mat file at each time point.
%%
%function Outputs(block, system) Output
  %if ParamSettings.useIncrRead
    {
      %assign nulldef = SLibGetNullDefinitionFromTfl()
      
      %% zero-crossing parameter
      %assign zeroCrossingSwitch = ParamSettings.ZeroCrossingSwitch
      
      void *fp = (void *) %<LibBlockPWork(PrevTimePtr,"","",0)>;
    
      if(fp != %<nulldef> && (%<RTMIs("MajorTimeStep")> || !%<zeroCrossingSwitch>)) {
        real_T t = %<LibGetTaskTimeFromTID(block)>;
        void *y = &%<LibBlockOutputSignal(0, "", "", 0)>;
        const char *errMsg = %<nulldef>;

        errMsg = rtwMATFileLoaderGetOutput( ...
          %<::CompiledModel.ErrorXMLMode>, ...
          fp, ...
          t, ...
          %<RTMIs("MajorTimeStep")>, ...
          &y ...
          );
        if (errMsg != %<nulldef>) {
          %<RTMSetErrStat("errMsg")>;
          return;
        }
      }
    }
  %else
    %if Accelerator %% Only occurs when 'FromFileIncrHDF5' feature is disabled, otherwise Accelerator always uses incremental reading
      /* Call into Simulink for From File */
      %<SLibCallBlockInSimulink(system, block, "SS_CALL_MDL_OUTPUTS")>
      
    %else
      %% Any references to isRSim only occur when 'FromFileIncrHDF5' feature is disabled, otherwise RSim always uses incremental reading
      {
        %assign npoints = ParamSettings.NumPoints
        %assign multColumns = isRSim || npoints != 1
        %% If there are/could be multiple columns in the data
        %% we need to keep track of the previous time.  Otherwise
        %% we just output the same data at each time step.
        %if multColumns
          static const real_T *pStart = %<SLibGetNullDefinitionFromTfl()>;
          static boolean_T initBasePtr = TRUE;
          real_T        time    = %<LibGetTaskTimeFromTID(block)>;
          const real_T  *pU     = %<SLibGetNullDefinitionFromTfl()>;
        %endif
        const real_T *pT = (const real_T *) %<LibBlockPWork(PrevTimePtr,"","",0)>;

        %if multColumns
          if (initBasePtr == TRUE) {
            pStart = (real_T *) %<LibBlockPWork(PrevTimePtr,"","",0)>;
            initBasePtr = FALSE;
          }
        %endif

        %% Write out the code for the case when there is 1 column
        %if isRSim || npoints == 1
          %openfile onecolumnbuf
          %assign rollVars = ["Y", "<pwork>/PrevTimePtr"]
          %roll idx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
            %assign y = LibBlockOutputSignal(0, "", lcv, idx)
            %if lcv != ""
              %<y> = pT[%<lcv> + 1];
            %else
              %assign index = idx + 1
              %<y> = pT[%<index>];
            %endif
          %endroll
          %closefile onecolumnbuf
        %endif
        
        %if isRSim
          %assign ::GBLFrFOutputIdx = ::GBLFrFOutputIdx + 1
          %assign frfIdx = GBLFrFOutputIdx
          if (%<::CompiledModel.Name>_gblFrFInfo[%<frfIdx>].nptsPerSignal == 1) {
            %<onecolumnbuf>
          } else {
          %elseif npoints == 1
            %<onecolumnbuf>
          }
          %return
        %endif
        
        %if isRSim
          pU = pStart + %<::CompiledModel.Name>_gblFrFInfo[%<frfIdx>].nptsPerSignal - 2;
        %else
          pU = pStart + %<npoints-2>;
        %endif

        %%
        %% Update current time pointer such that: pT[0] <= time < pT[1]
        %%

        if (time <= pStart[0]) {
          pT = pStart;
        } else if (time >= pU[0]) {
          pT = pU;
        } else {
          if (time < pT[0]) {
            while (time < pT[0]) {
              pT--;
            }
          } else {
            while (time >= pT[1]) {
              pT++;
            }
          }
        }
        %<LibBlockPWork(PrevTimePtr,"","",0)> = (void *) pT;

        %if isRSim
          pU = pT + %<::CompiledModel.Name>_gblFrFInfo[%<frfIdx>].nptsPerSignal;
        %else
          pU = pT + %<npoints>;
        %endif

        %%
        %% Compute the outputs.
        %%
        %assign noutputs = LibBlockOutputSignalWidth(0)
        %assign rollVars = ["Y"]
        if (pT[0] == pT[1]) {
          %roll idx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
            %assign y = LibBlockOutputSignal(0, "", lcv, idx)
            %<y> = pU[ (time < pT[0]) ? 0 : 1 ];
            %if (lcv != "") || (lcv == "" && idx < noutputs-1)
              %if isRSim
                pU += %<::CompiledModel.Name>_gblFrFInfo[%<frfIdx>].nptsPerSignal;
              %else
                pU += %<npoints>;
              %endif
            %endif
          %endroll
        } else {
          real_T f = (pT[1]-time)/(pT[1]-pT[0]);
          %roll idx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
            %assign y = LibBlockOutputSignal(0, "", lcv, idx)
            if (pU[0] == pU[1]) {
              %<y> = pU[0];
            } else {
              %<y> = f*pU[0]+(1.0-f)*pU[1];
            }
            %if (lcv != "") || (lcv == "" && idx < noutputs-1)
              %if isRSim
                pU += %<::CompiledModel.Name>_gblFrFInfo[%<frfIdx>].nptsPerSignal;
              %else
                pU += %<npoints>;
              %endif
            %endif
          %endroll
        }
        %if isRSim
          }
        %endif
      }
    %endif
  %endif
%endfunction

%% Terminate ==================================================================
%% Abstract:
%%      For incremental loading, release MATFileLoader instance, for the old-
%%      fashioned loading from RAM, release the data memory.
%%
%function Terminate(block, system) Output
  {
    %if ParamSettings.useIncrRead
      %assign nulldef = SLibGetNullDefinitionFromTfl()
      const char *errMsg = %<nulldef>;
      void *fp = (void *) %<LibBlockPWork(PrevTimePtr, "", "", 0)>;
      if(fp != %<nulldef>) {
        errMsg = rtwMATFileLoaderDestroyInstance(%<::CompiledModel.ErrorXMLMode>, fp);
        if (errMsg != %<nulldef>) {
          %<RTMSetErrStat("errMsg")>;
          return;
        }
      }
    %else
      %if isRSim  %% Only occurs when 'FromFileIncrHDF5' feature is disabled, otherwise RSim always uses incremental reading
        %if  ::numFrFBlocks > 0 
          %assign ::GBLFrFTermIdx = ::GBLFrFTermIdx + 1
          if(%<::CompiledModel.Name>_gblFrFInfo[%<::GBLFrFTermIdx>].tuDataMatrix != ...
            %<SLibGetNullDefinitionFromTfl()>){
            rt_FREE(%<::CompiledModel.Name>_gblFrFInfo[%<::GBLFrFTermIdx>].tuDataMatrix);
          }
        %endif
      %endif    
    %endif
  }
%endfunction

%% Function: ZeroCrossings =====================================================
%% Abstract:
%%      Zero-crossing callback.
%%
%function ZeroCrossings(block, system) Output
  %if ParamSettings.useIncrRead
    {
      %assign nulldef = SLibGetNullDefinitionFromTfl()
      void *fp = (void *) %<LibBlockPWork(PrevTimePtr,"","",0)>;
    
      if(fp != %<nulldef>) 
      {
        real_T t = %<LibGetT()>;
        double zcSignalValue = -1.0;
        void *pZCSignalValue = &zcSignalValue;
        const char *errMsg = %<nulldef>;
        errMsg = rtwMATFileLoaderGetZeroCrossingSignal(...
          fp, ...
          t, ...
          %<RTMIs("MajorTimeStep")>, ...
          pZCSignalValue...
          );
        if (errMsg != %<nulldef>) 
        {
          %<RTMSetErrStat("errMsg")>;
          return;
        }
        %<LibBlockZCSignalValue("","",0, 0)> = zcSignalValue;
      }
    }
  %endif    
%endfunction %% ZeroCrossings
%% [EOF] fromfile.tlc
