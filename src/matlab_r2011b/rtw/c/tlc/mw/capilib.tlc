%% ============================================================================
%% $RCSfile: capilib.tlc,v $
%% $Revision: 1.1.6.34 $ 
%% $Date: 2010/10/15 12:04:01 $
%% $Author: batserve $
%%
%% Abstract:
%%      Library of functions for generating C API files
%%    
%% Copyright 1994-2010 The MathWorks, Inc.

%if EXISTS("_CAPILIB_") == 0
%assign _CAPILIB_ = 1

%selectfile NULL_FILE

%% Function: FcnDynamicAPI ================================================
%% Abstract:
%%   Are we creating an API in the face of code variants?
%%
%function FcnDynamicAPI() void
  %return ::CompiledModel.HasCodeVariants
%endfunction
  
%% Function: FcnCAPIRootIOSupport ================================================
%% Abstract:
%%  Are Root Inputs/Outputs supported in C API?
%%
%function FcnCAPIRootIOSupport() void
  %if IsModelReferenceTarget()
    %return TLC_FALSE
  %endif
  %if MultiInstanceERTCode && !UsingMalloc
    %return TLC_FALSE
  %endif
  %if SLibFcnProtoCtrlActive()
    %return TLC_FALSE
  %endif
  %if SLibAutosarActive()
    %return TLC_FALSE
  %endif
  %return TLC_TRUE
%endfunction

%% Function SLibGenDataMapInfoSubstruct =======================================
%% Abstract:
%%   Returns DataMapInfo substructure to be added to rtModel structure
%%   Called in function FcnGetDTypeName.  
%%
%%
%function SLibGenDataMapInfoSubstruct() void
  %openfile tmpFcnBuf
  
  /*
   * DataMapInfo: 
   * The following substructure contains information regarding
   * structures generated in the model's C API.                   
   */
   struct {
     rtwCAPI_ModelMappingInfo mmi;
     %% Declare memory for the logging instance info
     %if IsModelReferenceSimTarget()
       rtwCAPI_ModelMapLoggingInstanceInfo mmiLogInstanceInfo;
     %endif
     %if IsMultiInsatnceERTOrModelReference()
       %if ::CompiledModel.NumDataAddrInMap > 0
	 void* dataAddress[%<::CompiledModel.NumDataAddrInMap>];
	 int32_T* vardimsAddress[%<::CompiledModel.NumDataAddrInMap>];
       %endif
     %endif
     %if ISFIELD(::CompiledModel,"ModelReferenceBlocks")
       %assign nMdlRefBlks = SIZE(::CompiledModel.ModelReferenceBlocks,0)
       %if nMdlRefBlks > 0
	 rtwCAPI_ModelMappingInfo* childMMI[%<nMdlRefBlks>];
       %endif
     %endif
     %% This is the system ran breadcrumb
     %assign sysRanDwork = SubsystemRanBC.SysRanDWork
     %assign nElem       = SIZE(sysRanDwork, 1)
     %if nElem > 0 && IsModelReferenceSimTarget()
       sysRanDType* systemRan[%<nElem>];
       int_T        systemTid[%<nElem>];
     %endif
   } \
  %closefile tmpFcnBuf
  %return tmpFcnBuf
%endfunction %% SLibGenDataMapInfoSubstruct

%% Function: FcnGetDataOrientation ============================================
%% Abstract:
%%   Return orientation of data based on number of rows and columns.  Value is
%%   rtwCAPI_SCALAR, rtwCAPI_VECTOR, rtwCAPI_MATRIX_ROW_MAJOR, 
%%   rtwCAPI_MATRIX_COL_MAJOR or rtwCAPI_MATRIX_COL_MAJOR_ND
%%
%function FcnGetDataOrientation(data) void
  %switch data.Class
    %case "scalar"
      %return "rtwCAPI_SCALAR"
    %case "vector"
      %return "rtwCAPI_VECTOR"
    %case "col-mat"
      %return "rtwCAPI_MATRIX_COL_MAJOR"
    %case "row-mat"
      %return "rtwCAPI_MATRIX_ROW_MAJOR"
    %case "col-mat-nd"
      %return "rtwCAPI_MATRIX_COL_MAJOR_ND"
    %default
      %assign errTxt = "Unhandled Data Orientation: %<data.Class>. The \
      orientation specified for \"%<data.Name>\" is not supported for \
      generating C-API. \n\tIf \"%<data.Name>\" is a Custom Storage class \
      object, the DataAccess method for layout of the custom class should \
      return one of the following strings: \
      \"scalar\" | \"vector\" | \"col-mat\" | \"row-mat\"|\"col-mat-nd\""
      %<LibReportError(errTxt)>
  %endswitch
%endfunction  %% FcnGetDataOrientation 

%% Function FcnGetDataTypeMapIdx ==============================================
%% Abstract:
%%   Return the index into DataTypeMap structure. The structure fields include
%%       o cDataName
%%       o mwDataName
%%       o numElements
%%       o elemMapIndex
%%       o slDataId
%%       o dataSize
%%       o isComplex
%%   Use Hash table approach to check if the data type is already mapped 
%%   in InstMap (im). 
%%   If it is mapped ->return the value associated with the data in the table. 
%%   If it is not mapped -> add data to DataTypeMap, add a new entry into 
%%   the hash table (im.DTypeKeys) and return the new value.
%%
%function FcnGetDataTypeMapIdx(dataTypeIdx, isComplex, isPointer, im) void

  %assign keyIdx =  dataTypeIdx
  %if (DataTypes.DataType[%<keyIdx>].IsFixedPoint == 1)
    %% For Fixed Point data types, look for the storage data type
    %% For e.g: A sfix_16 data type will be stored as a int16.
    %assign keyIdx = LibGetDataTypeStorageIdFromId(keyIdx)
  %endif
  
  %% Define Key 
  %assign dTypeKey = "DType%<keyIdx>C%<isComplex>P%<isPointer>"
  %% Check if Key Exists
  %if ISFIELD(im.DTypeKeys,dTypeKey)
    %assign dTypeMapIdx     = GETFIELD(im.DTypeKeys,dTypeKey)
  %else
    %assign isStruct        = LibIsStructDataType(dataTypeIdx)
    %if isComplex || isStruct
      %assign cDataName     = "struct"
    %else
      %assign cDataName     = SLibGetANSICDataTypeFromId(keyIdx)
    %endif
    %if isComplex  
      %assign mwDataName    = LibGetDataTypeComplexNameFromId(dataTypeIdx)
    %else
      %assign mwDataName    = LibGetDataTypeNameFromId(dataTypeIdx)
    %endif
    %assign numElem         = LibDataTypeNumElements(dataTypeIdx)
    %assign elemIdx         = FcnGetElementMapIdx(dataTypeIdx, im)
    %if isStruct
      %assign slDataId      = "SS_STRUCT"
    %elseif LibIsEnumDataType(dataTypeIdx)
      %assign slDataId = "SS_ENUM_TYPE"
    %else
      %assign slDataId      = LibGetDataTypeEnumFromId(dataTypeIdx)
      %if slDataId == ""
	%assign slDataId = "SS_STRUCT"
      %endif
    %endif
    %assign dataSize        ="sizeof(%<mwDataName>)"
    %assign im.DataTypeMap  = im.DataTypeMap + ...
"{\"%<cDataName>\", \"%<mwDataName>\", %<numElem>, %<elemIdx>, %<dataSize>, %<slDataId>, %<isComplex>, %<isPointer> }"
    %assign dTypeMapIdx     = im.NumDataTypes
    %assign im.NumDataTypes = im.NumDataTypes + 1
    %<LibAddIdentifier(im.DTypeKeys, dTypeKey, dTypeMapIdx)>
  %endif    
  %return dTypeMapIdx
%endfunction   %% FcnGetDataTypeMapIdx

%% Function FcnGetElementMapIdx ==============================================
%% Abstract:
%%   Return the index into ElementMap structure. The structure fields include
%%       o elementName
%%       o elementOffset
%%       o dataTypeIndex
%%       o dimIndex
%%       o fxpIndex
%%   Use Hash table approach to check if the element is already mapped 
%%   in InstMap (im). 
%%   If it is mapped ->return the value associated with the data in the table. 
%%   If it is not mapped -> add element to ElementMap, add a new entry into 
%%   the hash table (im.ElementKeys) and return the new value.
%%
%function FcnGetElementMapIdx(dataTypeIdx, im) void
  %if !LibIsStructDataType(dataTypeIdx)
    %return 0
  %endif
  %assign structName = LibGetDataTypeNameFromId(dataTypeIdx)
  %assign elemKey    = "E" + structName
  %if ISFIELD(im.ElementKeys, elemKey)
    %assign elemIdx   = GETFIELD(im.ElementKeys, elemKey)
  %else
    %% Get the BusStructure record from GlobalMemoryMap
    %assign gmmBusIdx       =  ...
      GETFIELD(GlobalMemoryMap.NonVirtualStructures.BusStructureHash, structName)
    %% Assert that the bus exists in GlobalMemoryMap
    %assert (gmmBusIdx >= 0)
    %assign gmmBusStruct    = GlobalMemoryMap.NonVirtualStructures.Bus[gmmBusIdx]
    %assign numElem         = gmmBusStruct.NumElements
    %assign elemMapTemp     = []
    %foreach eIdx = numElem
      %assign gmmBusElem    = gmmBusStruct.BusElement[eIdx]
      %assign elemName      = gmmBusElem.Name
      %assign addrOffset    = "rt_offsetof(%<structName>, %<elemName>)"
      %assign elemDTypeId   = gmmBusElem.DataTypeIdx
      %assign elemIsCplx    = gmmBusElem.IsComplex
      %assign dTypeMapIdx   = FcnGetDataTypeMapIdx(elemDTypeId,elemIsCplx,0,im)
      %assign dimIdx        = FcnGetDimensionMapIdx(gmmBusElem, im, "", "")
      %if gmmBusElem.IsFixedPoint
	%assign fxpIdx      = FcnGetFxpMapIdx(gmmBusElem, im)
      %else
	%assign fxpIdx      = 0
      %endif
      %assign elemMapTemp  = elemMapTemp + ...
	"{\"%<elemName>\", %<addrOffset>, %<dTypeMapIdx>, %<dimIdx>, %<fxpIdx>}"
    %endforeach
    %foreach eIdx = numElem
      %assign im.ElemMap   = im.ElemMap + elemMapTemp[eIdx]
    %endforeach
    %assign elemIdx        = im.NumElements
    %assign im.NumElements = im.NumElements + numElem
    %<LibAddIdentifier(im.ElementKeys, elemKey, elemIdx)>
  %endif
  %return elemIdx
%endfunction

%% Function FcnGetDimensionArrayIdx ===========================================
%% Abstract:
%%   Return the index into DimensionArray. Used in FcnGetDimensionMapIdx
%%
%function FcnGetDimensionArrayIdx(data,im) void
  %assign nDims           = data.NumDimensions
  %assign dimArrayKey     = "DA"
  %if nDims < 3
    %assign dimArrayKey   = dimArrayKey + "D%<data.NumRows>" + "D%<data.NumCols>"
  %else
    %foreach dimsIdx      = nDims
      %assign dimArrayKey = dimArrayKey + "D%<data.Dimensions[dimsIdx]>"
    %endforeach
  %endif
  %%
  %if ISFIELD(im.DimArrayKeys, dimArrayKey)
    %assign dimArrayIdx    = GETFIELD(im.DimArrayKeys, dimArrayKey)
  %else
    %assign dimArrayIdx    = im.NumDimArray
    %if nDims < 3
      %assign im.DimArray    = im.DimArray + data.NumRows + data.NumCols
      %assign im.DimArrayComments = im.DimArrayComments + ...
       "%<im.NumDimArray>" + "%<im.NumDimArray+1>"
      %assign im.NumDimArray = im.NumDimArray + 2
    %else
      %foreach dimsIdx = nDims
	%assign im.DimArray  = im.DimArray + data.Dimensions[dimsIdx]
	%assign im.DimArrayComments = im.DimArrayComments + ...
	"%<im.NumDimArray+dimsIdx>"
      %endforeach
      %assign im.NumDimArray = im.NumDimArray + nDims
    %endif
    %<LibAddIdentifier(im.DimArrayKeys, dimArrayKey, dimArrayIdx)>
  %endif
  %return dimArrayIdx
%endfunction    %% FcnGetDimensionArrayIdx

%% Function FcnGetVirtSigDimensionArrayIdx ===================================
%% Abstract:
%%   Return the index into DimensionArray. Used in FcnGetVirtSigDimensionMapIdx
%%
%function FcnGetVirtSigDimensionArrayIdx(regDims, im) void
  %assign nDims           = SIZE(regDims,1)
  %assign dimArrayKey     = "DA"
  
  %foreach dimsIdx      = nDims
    %assign dimArrayKey = dimArrayKey + "D%<regDims[dimsIdx]>"
  %endforeach
  
  %%
  %if ISFIELD(im.DimArrayKeys, dimArrayKey)
    %assign dimArrayIdx    = GETFIELD(im.DimArrayKeys, dimArrayKey)
  %else
    %assign dimArrayIdx    = im.NumDimArray
    %foreach dIdx = nDims
      %assign im.DimArray         = im.DimArray + regDims[dIdx]
      %assign im.DimArrayComments = im.DimArrayComments+"%<im.NumDimArray+dIdx>"
    %endforeach
    %assign im.NumDimArray = im.NumDimArray + nDims
    %<LibAddIdentifier(im.DimArrayKeys, dimArrayKey, dimArrayIdx)>
  %endif
  %return dimArrayIdx
%endfunction    %% FcnGetDimensionArrayIdx

%% Function FcnGetVarDimsAddrIdx ===========================================
%% Abstract:
%%   Return the index into VarDimsAddr. Used in FcnGetDimensionMapIdx
%%
%function FcnGetVarDimsAddrIdx(vardimsAddr,vardimsKey, im, ppIf, ppFi) void
  %if ISFIELD(im.VarDimsAddrKeys, vardimsKey)
    %assign vardimsAddrIdx         = GETFIELD(im.VarDimsAddrKeys, vardimsKey)
  %else
    %assign vardimsAddrIdx         = im.NumVarDimsAddr
    %assign im.VarDimsAddrMap      = im.VarDimsAddrMap + vardimsAddr
    %assign im.NumVarDimsAddr      = im.NumVarDimsAddr + 1
    %if ISFIELD(im, "VarDimsAddrMapIf")
      %assign im.VarDimsAddrMapIf    = im.VarDimsAddrMapIf + ppIf
      %assign im.VarDimsAddrMapEndIf = im.VarDimsAddrMapEndIf + ppFi
    %endif
    %<LibAddIdentifier(im.VarDimsAddrKeys, vardimsKey, vardimsAddrIdx)>
  %endif
  %return vardimsAddrIdx
%endfunction    %% FcnGetVarDimAddrIdx

%% Function FcnGetDimensionMapIdx =============================================
%% Abstract:
%%   Returns index into DimensionMap structure
%%   Use Hash table approach to check if the data dimension is already mapped 
%%   in InstMap (im). 
%%   If it is mapped ->return the value associated with the data in the table. 
%%   If it is not mapped -> add element to DimensionMap, add a new entry into 
%%   the hash table (im.DimensionKeys) and return the new value.

%function FcnGetDimensionMapIdx(data, im, ppIf, ppFi) void
  %assign orientation   = FcnGetDataOrientation(data)
  %assign numDims       = data.NumDimensions
  %assign dimArrayIndex = FcnGetDimensionArrayIdx(data,im)
  %if ISFIELD(data, "IsVarDims") && data.IsVarDims
    %assign vardimsAddrIndex = FcnGetVarDimsAddrIdx(data.VarDimsBaseAddr, data.VarDimsKey, im, ppIf, ppFi)
  %else
    %assign vardimsAddrIndex = FcnGetVarDimsAddrIdx(SLibGetNullDefinitionFromTfl(), "NULL", im, ppIf, ppFi)
  %endif
  %assign dimKey        = "DM%<orientation>%<dimArrayIndex>N%<numDims>%<vardimsAddrIndex>"
  %%
  %if ISFIELD(im.DimKeys,dimKey)
    %assign dimMapIdx           = GETFIELD(im.DimKeys,dimKey)
  %else
    %assign dimMapIdx           = im.NumDimensionMaps
    %assign im.NumDimensionMaps = im.NumDimensionMaps + 1
    %assign im.DimensionMap     = im.DimensionMap + ...
      "{%<orientation>, %<dimArrayIndex>, %<numDims>, %<vardimsAddrIndex>}"
    %<LibAddIdentifier(im.DimKeys, dimKey, dimMapIdx)>
    %if ISFIELD(im, "DimensionMapIf")
      %assign im.DimensionMapIf    = im.DimensionMapIf + ppIf
      %assign im.DimensionMapEndIf = im.DimensionMapEndIf + ppFi
    %endif
  %endif
  %return dimMapIdx
%endfunction    %% FcnGetDimensionMapIdx

%% Function FcnGetVirtSigDimensionMapIdx =====================================
%%
%function FcnGetVirtSigDimensionMapIdx(regDims, im, ppIf, ppFi) void
  %%%assign orientation   = FcnGetDataOrientation(data)
  %assign numDims = SIZE(regDims,1)
  %if numDims > 2
    %assign orientation = "rtwCAPI_MATRIX_COL_MAJOR_ND"
  %elseif regDims[0] > 1 && regDims[1] > 1
    %assign orientation = "rtwCAPI_MATRIX_COL_MAJOR"
  %elseif regDims[0] == 1 && regDims[1] == 1
    %assign orientation = "rtwCAPI_SCALAR"
  %else
    %assign orientation = "rtwCAPI_VECTOR"
  %endif
  %assign dimArrayIndex = FcnGetVirtSigDimensionArrayIdx(regDims,im)
  %assign vardimsAddrIndex = FcnGetVarDimsAddrIdx(SLibGetNullDefinitionFromTfl(), "NULL", im, ppIf, ppFi)
  %assign dimKey        = "DM%<orientation>%<dimArrayIndex>N%<numDims>%<vardimsAddrIndex>"
  %%
  %if ISFIELD(im.DimKeys,dimKey)
    %assign dimMapIdx            = GETFIELD(im.DimKeys,dimKey)
  %else
    %assign dimMapIdx            = im.NumDimensionMaps
    %assign im.NumDimensionMaps  = im.NumDimensionMaps + 1
    %assign im.DimensionMap      = im.DimensionMap + ...
      "{%<orientation>, %<dimArrayIndex>, %<numDims>, %<vardimsAddrIndex>}"
    %<LibAddIdentifier(im.DimKeys, dimKey, dimMapIdx)>
    %assign im.DimensionMapIf    = im.DimensionMapIf + ppIf
    %assign im.DimensionMapEndIf = im.DimensionMapEndIf + ppFi
  %endif
  %return dimMapIdx
%endfunction    %% FcnGetDimensionMapIdx

%% Function FcnGetFxpMapIdx ==================================================
%% Abstract:
%%   Returns index into the fixPtMap array of structures
%%   Use Hash table approach to check if the Fixed Point information is 
%%   already mapped in InstMap (im). 
%%   If it is mapped ->return the value associated with the data in the table. 
%%   If it is not mapped -> add a element to FixPtMap, add a new entry into 
%%   the hash table (im.FxpKeys) and return the new value.
%%
%% Note:
%%   Only,Fixed point data with Uniform Scaling is mapped into the API
%%   Non-Uniform scaling data is not mapped into the API.

%function FcnGetFxpMapIdx(data, im) void

  %assign fxpRec = data.FixedPointInfo 
  %%
  %if fxpRec.Scaling == "uniform"
    
    %% Create a Hash Key for the Fix Pt Values
    %% Hash key is Sum of
    %%    "U" - for uniform
    %%    exponent - EN prepended for negative, E prepend for Positive
    %%    FractionalSlope
    %%    Bias
    %%    IsSigned
    %%    WordLength
    %if %<fxpRec.FixedExp> < 0
      %assign exp    = "EN%<-fxpRec.FixedExp>"
    %else
      %assign exp    = "E%<fxpRec.FixedExp>"
    %endif
    %assign biasIdx  = FcnGetStoredDoublesIdx(im, fxpRec.Bias)
    %assign slopeIdx = FcnGetStoredDoublesIdx(im, fxpRec.FracSlope)
    %assign fxpKey   = "U" + exp + ...
      "S%<slopeIdx>B%<biasIdx>S%<fxpRec.IsSigned>N%<fxpRec.NumRequiredBits>"
    
    %% Check if the Hash key exists in FxpKeys record
    %if ISFIELD(im.FxpKeys, fxpKey)
      %assign fxpMapIdx      = GETFIELD(im.FxpKeys,fxpKey)
    %else
      %assign fxpMapIdx      = im.NumFixPoint
      %assign im.NumFixPoint = im.NumFixPoint + 1
      %assign slopeStr       = "(const void *) &rtcapiStoredFloats[%<slopeIdx>]"
      %assign biasStr        = "(const void *) &rtcapiStoredFloats[%<biasIdx>]"
      %assign im.FixPointMap = im.FixPointMap + ...
	"{%<slopeStr>, %<biasStr>, rtwCAPI_FIX_UNIFORM_SCALING, " ...
	"%<fxpRec.NumRequiredBits>, %<fxpRec.FixedExp>, %<fxpRec.IsSigned>}"
      %<LibAddIdentifier(im.FxpKeys, fxpKey, fxpMapIdx)>
    %endif
  %else  
    %assign fxpMapIdx = 0
  %endif
  %return fxpMapIdx
%endfunction  %% FcnGetFxpMapIdx

%% Function FcnGetStoredDoublesIdx ============================================
%% Abstract
%function FcnGetStoredDoublesIdx(im, value) void

  %% Create a hash key from the value 
  %if value == 0
    %assign hashKey = "K0"
  %elseif value < 0
    %% Format Value as a double with %g format specifier
    %assign cValue = SPRINTF("%g",-value)
    %if value > -1
      %assign hashKey = "N" + FEVAL("regexprep", cValue, "[.-]", "n")
    %else
      %assign hashKey = "N" + FEVAL("regexprep", cValue, "[.+]", "p")
    %endif
  %else
    %assign cValue = SPRINTF("%g",value)
     %if value < 1
      %assign hashKey = "P" + FEVAL("regexprep", cValue, "[.-]", "n")
    %else
      %assign hashKey = "P" + FEVAL("regexprep", cValue, "[.+]", "p")
    %endif
  %endif 
  
  %% Check if hashKey already exists in DoubleKeys
  %if ISFIELD(im.DoubleKeys, hashKey)
    %% if exists, return the value associated with the key
    %assign retValue = GETFIELD(im.DoubleKeys, hashKey)
  %else
    %% add the value to DoublesMap and return the appended value
    %assign retValue      = im.NumDoubles
    %assign im.DoublesMap = im.DoublesMap + value
    %<LibAddIdentifier(im.DoubleKeys, hashKey, retValue)>
    %assign im.NumDoubles = im.NumDoubles + 1
  %endif
  
  %% return the index of the double number in the Doubles Array
  %return retValue
%endfunction

%% Function FcnGetCAPIGrndAddr ===========================================
%% Abstract
%function FcnGetCAPIGroundAddr(im, dtIdx, isComplex, regDims) void
  %assign nDims = SIZE(regDims,1)
  %assign width = 1
  %foreach dimsIdx      = nDims
    %assign width = width*regDims[dimsIdx]
  %endforeach
  
  %% Create a hash key from the value 
  %assign hashKey = "GRND_DT%<dtIdx>_%<isComplex>_W%<width>"
  %assign optWidth = (width > 1) ? "[%<width>]": ""
    
  %% Check if hashKey already exists in DoubleKeys
  %if ISFIELD(im.GroundKeys, hashKey)
    %% if exists, return the value associated with the key
    %assign value = GETFIELD(im.GroundKeys, hashKey)
  %else
    %% add the defn to groundsMap and return the appended value
    %assign dt    = ::CompiledModel.DataTypes.DataType[dtIdx]
    %if isComplex
      %assign value = "static %<dt.ComplexName> %<hashKey>%<optWidth>"
    %else
      %assign value = "static %<dt.Name> %<hashKey>%<optWidth>"
    %endif
    %assign im.GroundsMap = im.GroundsMap + value
    %<LibAddIdentifier(im.GroundKeys, hashKey, value)>
    %assign im.NumGrounds = im.NumGrounds + 1
  %endif
  
  %% return the address
  %assign retValue = (width > 1) ? "%<hashKey>[0]" : hashKey
  %return "&(%<retValue>)"
%endfunction

%% FcnGetSampTimeIdx =========================================================
%% Abstract:
%%
%function FcnGetSampTimeIdx(tID, isFrame, im) void
  %if tID >= 0
    %assign tidKey = "T%<tID>F%<isFrame>"
    %if ISFIELD(im.STimeKeys, tidKey)
      %assign sTimeIdx =  GETFIELD(im.STimeKeys, tidKey)
    %else
      %assign sTimeIdx          = im.NumSampleTimes
      %assign im.NumSampleTimes = im.NumSampleTimes + 1
      %assign sTimeRec          = ::CompiledModel.SampleTime[tID]
      %assign sPeriodIdx = FcnGetStoredDoublesIdx(im,sTimeRec.PeriodAndOffset[0])
      %assign sPeriodStr = "(const void *) &rtcapiStoredFloats[%<sPeriodIdx>]"
      %assign sOffsetIdx = FcnGetStoredDoublesIdx(im,sTimeRec.PeriodAndOffset[1])
      %assign sOffsetStr = "(const void *) &rtcapiStoredFloats[%<sOffsetIdx>]"
      %assign im.SampleTimeMap  = im.SampleTimeMap + ...
	"{%<sPeriodStr>, %<sOffsetStr>, %<sTimeRec.TID>, %<isFrame>}"
      %<LibAddIdentifier(im.STimeKeys, tidKey, sTimeIdx)>
    %endif
  %else %% for constant and triggered signals TID < 0
    %assign tidKey = "TN%<-tID>%<isFrame>"
    %if ISFIELD(im.STimeKeys, tidKey)
      %assign sTimeIdx =  GETFIELD(im.STimeKeys, tidKey)
    %else
      %assign sTimeIdx          = im.NumSampleTimes
      %assign im.NumSampleTimes = im.NumSampleTimes + 1
      %assign im.SampleTimeMap  = im.SampleTimeMap + ...
	"{%<SLibGetNullDefinitionFromTfl()>,%<SLibGetNullDefinitionFromTfl()>, %<tID>, %<isFrame>}"
      %<LibAddIdentifier(im.STimeKeys, tidKey, sTimeIdx)>
    %endif
  %endif
  %return sTimeIdx
%endfunction


%%  =========================================================
%% Abstract:
%%      Walks the .rtw file and caches the bus signals and
%% elements array in busInfo.
%function FcnDumpBusElements(busInfo, offset, blkPath, portIdx) Output
  %assign RealNumElements = 0 %% Some elements in the port obj may be unconnected,
                              %% so we need to keep track of RealNumElements
  %createrecord foo {}
  %foreach reg = NumRegions
    %with Region[reg]
      %assign busIdx = 0
      %createrecord portObj { SignalSrc [-1] SignalOffset [-1] Width 1 }
      %if Type == "Bus"
        %assign shdIdx = SigHierIdx
        \
        %if BlockHierarchyMap.NumSignalHierarchyDescriptors > 0
          %assign busIdx = BlockHierarchyMap.SignalHierarchyDescriptor[shdIdx].HierarchyNode[0].rtwCAPIBusIdx
          %addtorecord foo elements {type "rtwCAPI_bus" ; index busIdx}
          %assign RealNumElements = RealNumElements + 1
        %endif
      %else
        %assign shdIdx = SigHierIdx
        %if ISFIELD(BlockHierarchyMap.SignalHierarchyDescriptor[shdIdx].HierarchyNode[0], "rtwCAPIAddrMapIdx")          
          %assign capiIdx = BlockHierarchyMap.SignalHierarchyDescriptor[shdIdx].HierarchyNode[0].rtwCAPIAddrMapIdx
          %addtorecord foo elements {type "rtwCAPI_signal" ; index capiIdx}
          %assign RealNumElements = RealNumElements + 1        
        %endif
      %endif
    %endwith %% Region
    %undef portObj
  %endforeach %% 
  %if RealNumElements > 0
    %assign busElement = "{\"%<SignalLabel>\", \"%<blkPath>\", %<portIdx>, %<RealNumElements>, &rtBusElements[%<offset>]},"
    %addtorecord busInfo busElements {str busElement ; indicies %<foo>}
    %assign nextOffset = offset + RealNumElements
    %return nextOffset
  %else
    %return offset
  %endif
%endfunction

%% FcnCAPIHookInit =========================================================
%% Abstract: Initialize the C-API Hooks data structure
%%
%function FcnCAPIHookInit() void
   %% default initialization
   %createrecord CAPIHooks { \
      Enabled TLC_FALSE;     \
      Hooks   [];            \
      Data    []             \
   }
   %if SLibIsERTTarget() && !IsModelReferenceSimTarget()      
     %% add required hook implementations
     %assign SILPILSignalLogging = FEVAL("slfeature", "SILPILSignalLogging")
     %if SILPILSignalLogging
        %% include the C-API MAT-file hooks
        %assign CAPIHooks.Hooks = ["capimathooks.tlc"]   
     %endif 
     %% if there are hook implementations, enable CAPIHooks
     %if !LibIsEmpty(CAPIHooks.Hooks)
        %assign CAPIHooks.Enabled = TLC_TRUE
        %% initialize Data
        %createrecord Data {                   \
           DataMapInfo RTMGet("DataMapInfo");  \
           Signals []                          \
        }
        %assign CAPIHooks.Data = Data
     %endif
  %endif
  %return CAPIHooks
%endfunction

%% FcnCAPIHookAddSignal =========================================================
%% Abstract: Add a signal to the C-API Hooks data structure
%%
%function FcnCAPIHookAddSignal(CAPIHooks,    \
                               data,         \
                               blkPath,      \
                               portIdx,      \
                               sigLabel,     \
                               dataTypeIdx,  \
                               addrMapIdx,   \
                               tID,          \
                               isPointer,    \
                               isComplex,    \
                               isFixedPoint,  \
                               isFrame) void
%if CAPIHooks.Enabled
   %% Sample Period & Offset
   %if tID >= 0
      %% Periodic
      %assign sPeriod = ::CompiledModel.SampleTime[tID].PeriodAndOffset[0]
      %assign sOffset = ::CompiledModel.SampleTime[tID].PeriodAndOffset[1]
   %else
      %% -1: triggered
      %% -2: constant
      %assign sPeriod = tID
      %assign sOffset = tID 
   %endif

   %% Dimensions
   %assign nDims = data.NumDimensions
   %if nDims < 3
      %assign dimensions = [%<data.NumRows>, %<data.NumCols>]
   %else
      %assign dimensions = data.Dimensions
   %endif

   %% Get the CGType record
   %assign cgType   = ::CompiledModel.CGTypes.CGType[dataTypeIdx]

   %% Add Signal
   %createrecord CAPISigRec { \
              Label sigLabel; \
              BlockPath blkPath; \
              PortIdx portIdx; \
              DtypeId dataTypeIdx; \
              IsComplex isComplex; \
              IsFixedPoint isFixedPoint; \
              AddressMapIndex addrMapIdx; \
              IsPointer isPointer; \
              TypeIdentifier cgType.Name; \
              Dimensions dimensions; \
              SamplePeriod sPeriod; \
              SampleOffset sOffset; \
              IsFrame isFrame \
   }                        
   %assign CAPIHooks.Data.Signals = CAPIHooks.Data.Signals + CAPISigRec 
%endif
%endfunction

%% FcnCAPIHookExecute =========================================================
%% Abstract: Call each registered C-API hook function
%%
%function FcnCAPIHookExecute(CAPIHooks) void
%if CAPIHooks.Enabled   
   %foreach HookIdx = SIZE(CAPIHooks.Hooks)[1]
      %assign CAPIHookType = "CAPIHook"
      %assign CAPIHook = CAPIHooks.Hooks[HookIdx]
      %generatefile "%<CAPIHookType>" "%<CAPIHook>"
      %<GENERATE_TYPE(CAPIHooks.Data, "FcnCAPIHook", "%<CAPIHookType>")>
   %endforeach
%endif
%endfunction

%endif  %% EXISTS("_CAPILIB_") == 0

%% EOF capilib.tlc ============================================================
