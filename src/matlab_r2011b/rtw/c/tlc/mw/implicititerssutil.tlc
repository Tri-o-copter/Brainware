%% ============================================================================
%% $Revision: 1.1.6.25.2.2 $
%% $Date: 2011/07/01 16:11:26 $
%%
%% Abstract:
%%   This system file contains helper functions to support Implicit Iterator
%%   Subsystems
%%
%% Copyright 1994-2011 The MathWorks, Inc.
%%

%if EXISTS("_IMPLICITITERSSUTIL_") == 0
%assign _IMPLICITITERSSUTIL_ = 1

%% Function SLibGetSubsystemIsImplicitIterSS =====================================
%%
%%
%%
%function SLibGetSubsystemIsImplicitIterSS(sys)
  %return ISFIELD(sys, "ImplicitIteratorSubsystem") && ...
    sys.ImplicitIteratorSubsystem
%endfunction %% end SLibGetSubsystemIsImplicitIterSS


%function SLibGetImplicitIterSSMaintainingSeparateStates(sys)
  %return sys.MaintainSeparateState
%endfunction


%function SLibGetImplicitIterSSMaintainingSeparateGlobalNonReusableIOs(sys)
  %return sys.MaintainSeparateGlobalNonReusableIO
%endfunction

%function SLibGetIsImplicitIterSSReuseWithDiffNumIters(sys)
  %return SLibGetSubsystemIsImplicitIterSS(sys) && SLibGetImplicitIterSSMaintainingSeparateStates(sys) &&...
    ISFIELD(sys, "IISCodeReuseForDiffNumIters") && sys.IISCodeReuseForDiffNumIters
%endfunction


%function SLibVarGroupUsedAsMatrix(CGType)
  %return ISFIELD(CGType, "Constructor") && ISEQUAL(CGType.Constructor, "matrix")
%endfunction


%function SLibSysVarGroupUsedAsMatrix(sys, type, idx)
  %assign varGroupIdx = FcnSysVarGroupIndex(sys, type, idx)
  %assign retStr = ""
  %assign asMatrix = varGroupIdx >= 0
  
  %if asMatrix
    %assign varGroup = ::CompiledModel.VarGroups.VarGroup[varGroupIdx]
    %assign cgType = ::CompiledModel.CGTypes.CGType[varGroup.CGTypeIdx] 
    %assign asMatrix = SLibVarGroupUsedAsMatrix(cgType)
  %endif
  
  %return asMatrix
%endfunction


%function SLibSysVarGroupWidth(sys, type, idx)
  %assign varGroupIdx = FcnSysVarGroupIndex(sys, type, idx)
  %assign retStr = ""
  %assign width = 1
  
  %if varGroupIdx >= 0
    %assign varGroup = ::CompiledModel.VarGroups.VarGroup[varGroupIdx]
    %assign cgType = ::CompiledModel.CGTypes.CGType[varGroup.CGTypeIdx] 
    %if SLibVarGroupUsedAsMatrix(cgType)
      %assign width = cgType.Width
    %endif
  %endif 
  
  %return width
%endfunction


%function SLibGetBaseTypeForVarGroupUsedAsMatrix(CGType)
  %return ::CompiledModel.CGTypes.CGType[CGType.BaseIdx]
%endfunction

%function SLibIsMatrixVarGroupForIIS(sysIdx, type)
   %assign varGroupIdx = FcnSysVarGroupIndex(System[sysIdx], type, 0)
   %assign varGroup = ::CompiledModel.VarGroups.VarGroup[varGroupIdx]
   %return SLibVarGroupUsedAsMatrix(CGTypes.CGType[varGroup.CGTypeIdx]) && ...
     ISFIELD(System[sysIdx], "IndexingSigSrc") 
%endfunction
 
%function CommonDeclarationAndInitCanNumIters(tid, isRateGrouping)
  %assign numItersDeclBuffer = ""
  
  %openfile numItersDeclBuffer
  %foreach argIdx=NumCanonicalDWorkArgDefs
    %assign canDWork = CanonicalDWorkArgDef[argIdx]
    %if FcnArgNeeded(canDWork, tid, isRateGrouping)
      %assign dwIdx = canDWork.FirstSignalSrc
      %assign dwRec = DWorks.DWork[dwIdx]
      %if ISFIELD(dwRec, "DWorkForNumIters")
        %assign dataType = SLibGetRecordDataTypeName(dwRec, "")
        %assert SLibDWorkWidth(dwRec) == 1
        %<dataType> NumIter_%<argIdx> = %<dwRec.DWorkForNumIters>;
      %endif
    %endif
  %endforeach
  %closefile numItersDeclBuffer
  
  %return numItersDeclBuffer
%endfunction

%% Function: SLibGetSystemIndexVar =============================================
%% Abstract:
%%   Returns the scratch dworks iterator variable name or dwork access path.
%%
%function SLibGetSystemIndexVar(cs, accessSysIdx) void
  %%
  %% DWork or BlockIO is an array of struct.
  %% The index of the current iteration is passed by a DWork.
  %%
  %assign cross = System[cs[0]].CrossNoArgFcnBound
  %assign dwork = DWorks.DWork[IDNUM(System[cs[0]].IndexingSigSrc)[1]]
  %%
  %if dwork.IsLocalScratchDWork == 1
    %if dwork.VarGroupVarIdx > -1              
      %assign varGroupIdx = ...
        ::CompiledModel.VarGroups.VarGroupVarIdx[dwork.VarGroupVarIdx]
      %return SLibCG_GetVarGroupElementPath(varGroupIdx, ...
        SLibGetHStructWithLocalScopeSystemIdx(accessSysIdx), cross)
    %else
      %return LibGetRecordIdentifier(dwork)
    %endif
  %else
    %assign varGroupIdx = FcnSysVarGroupIndex(System[cs[0]], "DWork", cs[1])
    %assign dwPath = SLibCGIRVarGroupPath(varGroupIdx, accessSysIdx, cross)
    %return dwPath + LibGetRecordIdentifier(dwork)
  %endif
%endfunction

%function SLibGetIndexedDWorkOrBlockIOPathForImplicitIterSS(varGroupIdx, identiPath, indenti, cs, accessSysIdx, sysIdx)
  %assign dwName = SLibGetSystemIndexVar(cs, accessSysIdx)
  %if Accelerator
    %% When compiled for acceleration, the first element in the struct
    %% array is reserved to match the memory layout in Simulink
    %if System[cs[0]].HasBlockRunInSimulinkForAccel
      %% When there is a block inside subsystem calling back to Simulink, 
      %% all operations are on the first element in the struct array.
      %assign fullpath = "&%<identiPath>%<indenti>[0]"
    %else
      %% Where there is no block inside subsystem calling back to Simulink,
      %% The first element in the struct array will not be used
      %assign fullpath = "&%<identiPath>%<indenti>[%<dwName>+1]"
    %endif
  %else
    %assign varGroup = ::CompiledModel.VarGroups.VarGroup[varGroupIdx]
    %if SLibVarGroupUsedAsMatrix(CGTypes.CGType[varGroup.CGTypeIdx]) && ...
      System[cs[0]].RTWSystemCode == 2
      %% If IIS has a matrix varGroup and it has its own hier scope, the 
      %% idenfiPath should have been indexed, and no need to append [%<dwName>] at the end.
      %assign fullpath = "&%<identiPath>%<indenti>"
    %else
      %% If IIS has no matrix varGroup, the core subsystem contains a matrix 
      %% varGroup, and the identi should be indexed.
      %assign fullpath = "&%<identiPath>%<indenti>[%<dwName>]"
    %endif
  %endif
  
  %return fullpath
%endfunction

%function SLibGetIndexedCGIRVarGroupPathForISSLoopBoundReuse(varGroup, vName, sysIdx)
  %if ISEQUAL(varGroup.Category, "DWork") || ...
      ISEQUAL(varGroup.Category, "ContStates") || ...
      ISEQUAL(varGroup.Category, "ContStatesDerivative") || ...
      ISEQUAL(varGroup.Category, "ContStatesDisabled") || ...
      ISEQUAL(varGroup.Category, "BlockIO") || ...
      ISEQUAL(varGroup.Category, "ZCEvent") || ...
      ISEQUAL(varGroup.Category, "ZCSV")
     %assign vgCGType = CGTypes.CGType[varGroup.CGTypeIdx]
     %assert(ISFIELD(System[sysIdx], "IndexingSigSrc"))
     %assign dw = DWorks.DWork[IDNUM(System[sysIdx].IndexingSigSrc)[1]]
     %assert(dw.IsLocalScratchDWork == 1)
     %if dw.VarGroupVarIdx > -1              
       %assign varGroupIdx = ...
         ::CompiledModel.VarGroups.VarGroupVarIdx[dw.VarGroupVarIdx]
       %assert SLibGetHStructWithLocalScopeSystemIdx(sysIdx) == sysIdx
       %assign dwName = SLibCG_GetVarGroupElementPath(varGroupIdx, ...
         SLibGetHStructWithLocalScopeSystemIdx(sysIdx), ...
         System[sysIdx].CrossNoArgFcnBound)
     %else
       %assign dwName  = LibGetRecordIdentifier(dw)
     %endif
     %return vName + "[" + dwName + "]"
   %endif
 %endfunction
  
%function SLibGetIndexedCGIRVarGroupPathForISSNoLoopBoundReuse(varGroupIdx, vName, sysIdx, accSysIdx, cross)
  %assign varGroup = ::CompiledModel.VarGroups.VarGroup[varGroupIdx]
  %if ISEQUAL(varGroup.Category, "DWork") || ...
      ISEQUAL(varGroup.Category, "ContStates") || ...
      ISEQUAL(varGroup.Category, "ContStatesDerivative") || ...
      ISEQUAL(varGroup.Category, "ContStatesDisabled") || ...
      ISEQUAL(varGroup.Category, "BlockIO") || ...
      ISEQUAL(varGroup.Category, "ZCEvent") || ...
      ISEQUAL(varGroup.Category, "ZCSV")
    %assign vgCGType = CGTypes.CGType[varGroup.CGTypeIdx]
    %if ((::BlockFcn == "Registration" ||...
      ::BlockFcn == "Constructor"  || ...
      ::BlockFcn == "Destructor")) && ...
      ((EXISTS("NeedForEachLoopInReg") && ...
      ::NeedForEachLoopInReg) || ...
      (EXISTS("UseConstantForVarGroupIdx") && ...
      ::UseConstantForVarGroupIdx))
      %if EXISTS("NeedForEachLoopInReg") && ...
        ::NeedForEachLoopInReg
        %% Get index for the vargroup based on the hard-coded loop in TLC. This
        %% is used for generating call to the registration function of the
        %% reference model inside a For Each subsystem 
        %if Accelerator
          %assign varName = "i_%<ForEachLoopHierarchyLevel>+1"
        %else
          %assign varName = "i_%<ForEachLoopHierarchyLevel>"
        %endif
        %assign ::ForEachLoopHierarchyLevel = ::ForEachLoopHierarchyLevel + 1
        %if ::ForEachLoopHierarchyLevel > ::NumForEachLoopHierarchyLevel
          %assign ::ForEachLoopHierarchyLevel = 1
        %endif
      %else
        %% Get the pre-defined index (in rtw file) for the vargroup. This is
        %% used for the non-continuous derivative signals inside For Each
        %% subsystems 
        %if Accelerator
          %assign varName = "%<::VarGroupIndexVector[::VarGroupIndexVectorIdx]>+1"
        %else
          %assign varName = %<::VarGroupIndexVector[::VarGroupIndexVectorIdx]>
        %endif
        %assign ::VarGroupIndexVectorIdx = ::VarGroupIndexVectorIdx - 1
        %if ::VarGroupIndexVectorIdx < 0
          %assign ::VarGroupIndexVectorIdx = ::VarGroupIndexVectorSize - 1
        %endif
      %endif
      %return SLibCGIRVarGroupPath(varGroup.ParentVarGroupIdx, accSysIdx,cross) + ...
        vName + "[%<varName>]."
    %elseif (::GlobalGeneratingSubFunctions || ...
      ::BlockFcn == "Output"     || ::BlockFcn == "OutputUpdate"    || ...
      ::BlockFcn == "Update"     || ::BlockFcn == "RootUpdate"      || ...
      ::BlockFcn == "Initialize" || ::BlockFcn == "Start"           || ...
      ::BlockFcn == "Enable"     || ::BlockFcn == "Disable"         || ...
      ::BlockFcn == "Derivative" || ::BlockFcn == "ZeroCrossing"    || ...
      ::BlockFcn == "MassMatrix" || ::BlockFcn == "ForcingFunction" || ...
      ::BlockFcn == "Projection" || ::BlockFcn == "Terminate")
      
      %% (1) Access member of global non-reusable IO. For example, if a Delay block
      %% connects directly to an Outport block and GNRIO is maintained
      %% separately, output of Delay will not be canonical output. In parent
      %% subsystem, hidden Assignment block will access Delay output directly if
      %% the output is required to be concatenatted.
      %% (2) Access member of DWork. If variable dims signals comes out from the
      %% hidden code reuse subsystem for Implicit Iterator Subsystem, shared
      %% DWork will be accessed.
      %assign cs      = System[sysIdx].CallSites[varGroup.InstanceIdx]
      %if ISFIELD(System[cs[0]], "IndexingSigSrc")
        %assign dwName = SLibGetSystemIndexVar(cs, accSysIdx)
        %if Accelerator && ...
           !(ISEQUAL(varGroup.Category, "ContStates") || ...
             ISEQUAL(varGroup.Category, "ContStatesDerivative") || ...
             ISEQUAL(varGroup.Category, "ContStatesDisabled") || ...
             ISEQUAL(varGroup.Category, "ZCEvent") || ...
             ISEQUAL(varGroup.Category, "ZCSV"))
          %if System[cs[0]].HasBlockRunInSimulinkForAccel
            %return SLibCGIRVarGroupPath(varGroup.ParentVarGroupIdx, accSysIdx,cross) + ...
              vName + "[0]."
          %else
            %return SLibCGIRVarGroupPath(varGroup.ParentVarGroupIdx, accSysIdx,cross) + ...
              vName + "[%<dwName>+1]."
          %endif
        %else
          %if EXISTS("PartialIndexingInDerivFcn") && ...
            ::PartialIndexingInDerivFcn && ...
            cs[0] < ::PartialIdxBoundarySysystemIndex
            %% The current var group belong to a For Each which is not accessed
            %%in its loop
            %return SLibCGIRVarGroupPath(varGroup.ParentVarGroupIdx, accSysIdx,cross) + ...
            vName + "[0]."
          %else
            %return SLibCGIRVarGroupPath(varGroup.ParentVarGroupIdx, accSysIdx,cross) + ...
            vName + "[%<dwName>]."
          %endif
        %endif
      %else
        %if Accelerator && ...
          !(ISEQUAL(varGroup.Category, "ContStates") || ...
          ISEQUAL(varGroup.Category, "ContStatesDerivative") || ...
          ISEQUAL(varGroup.Category, "ContStatesDisabled") || ...
          ISEQUAL(varGroup.Category, "ZCEvent") || ...
          ISEQUAL(varGroup.Category, "ZCSV")) && ...
          !System[cs[0]].HasBlockRunInSimulinkForAccel
          %% Acceleration mode where the number of iteration is 1 and there is
          %% no block calling back to Simulink
          %return SLibCGIRVarGroupPath(varGroup.ParentVarGroupIdx, accSysIdx,cross) + ...
            vName + "[1]."
        %else
          %% Acceleration mode where the number of iteration is 1. 
          %return SLibCGIRVarGroupPath(varGroup.ParentVarGroupIdx, accSysIdx,cross) + ...
            vName + "[0]."
        %endif
      %endif
    %elseif ::BlockFcn == "Registration" || ::BlockFcn == "GlobalMap"
      %% xxx Temorary solution (DJia). For dwork in Implicit Iterator Subsystem,
      %% return the last region since for-iterator subsystem always logging the later iteration
      %if Accelerator && ...
           !(ISEQUAL(varGroup.Category, "ContStates") || ...
             ISEQUAL(varGroup.Category, "ContStatesDerivative") || ...
             ISEQUAL(varGroup.Category, "ContStatesDisabled") || ...
             ISEQUAL(varGroup.Category, "ZCEvent") || ...
             ISEQUAL(varGroup.Category, "ZCSV"))
        %return SLibCGIRVarGroupPath(varGroup.ParentVarGroupIdx, accSysIdx,cross) + ...
          vName + "[%<vgCGType.Dimensions[0]>]."
      %else
        %return SLibCGIRVarGroupPath(varGroup.ParentVarGroupIdx, accSysIdx,cross) + ...
          vName + "[%<vgCGType.Dimensions[0] - 1>]."
      %endif
    %else
      %return SLibCGIRVarGroupPath(varGroup.ParentVarGroupIdx, accSysIdx,cross) + ...
        vName + "."
    %endif
  %else
    %return ...
      SLibCGIRVarGroupPath(varGroup.ParentVarGroupIdx, accSysIdx,cross) + ...
      vName + "."
  %endif
%endfunction

%function SLibDumpSupportsMultipleExecInstancesFlag()
  %if ISFIELD(::CompiledModel,"ModelSupportsMultipleExecInstances") && ...
      ::CompiledModel.ModelSupportsMultipleExecInstances
    %return "ssSupportsMultipleExecInstances(S, true);"
  %else
    %return "ssSupportsMultipleExecInstances(S, false);"
  %endif
%endfunction

%function SLibDumpHasStateInsideForEachSSFlag()
  %if ISFIELD(::CompiledModel,"ModelHasStateInsideForEachSS") && ...
      ::CompiledModel.ModelHasStateInsideForEachSS
    %return "ssHasStateInsideForEachSS(S, true);"
  %else
    %return "ssHasStateInsideForEachSS(S, false);"
  %endif
%endfunction

%function SLibDumpHasForEachSubsystemFlag()
  %if ISFIELD(::CompiledModel,"ModelHasParallelForEachSS") && ...
    ::CompiledModel.ModelHasParallelForEachSS
    %return "ssSetModelRefHasParforForEachSS(S, true);"
  %else
    %return "ssSetModelRefHasParforForEachSS(S, false);"
  %endif
%endfunction

%% Returns true if varGroup is matrix type or inside a matrix varGroup
%% 
%function SLibGetIsVarGroupParentedByMatrixVarGroup(varGroup)
  %if SLibVarGroupUsedAsMatrix(CGTypes.CGType[varGroup.CGTypeIdx])
    %return TLC_TRUE
  %endif
  %if varGroup.ParentVarGroupIdx != -1
    %assign parentVarGroup = ::CompiledModel.VarGroups.VarGroup[varGroup.ParentVarGroupIdx]
    %assign inInMatrixVarGroup = SLibGetIsVarGroupParentedByMatrixVarGroup(parentVarGroup)
    %if inInMatrixVarGroup
      %return TLC_TRUE
    %endif
  %endif
  %return TLC_FALSE
%endfunction

%function SLibGetDWorkIsImplicitIterSubsysNumItersCanDWorkInBaseSys(dwIdx)
  %assign isCanDW = TLC_FALSE
  %if ISFIELD(::CompiledModel.DWorks.DWork[dwIdx], "DWorkForNumIters")
    %assign baseSysIdx = GetBaseSystemIdx()
    %assign baseSys = ::CompiledModel.System[baseSysIdx]
    %with baseSys.Interface
      %foreach cdwIdx = NumCanonicalDWorkArgDefs
        %assign canDW = CanonicalDWorkArgDef[cdwIdx]
        %if canDW.FirstSignalSrc == dwIdx
          %assign isCanDW = TLC_TRUE
          %break
        %endif
      %endforeach
    %endwith
  %endif
  %return isCanDW
%endfunction

%function AppendImplicitIterSubsysNumItersDWorkForRefModel(args, currentTID, ...
  isRateGrouping, isCallSite)
  %foreach argIdx = NumCanonicalDWorkArgDefs
    %assign argDef = CanonicalDWorkArgDef[argIdx]
    %if FcnArgNeeded(argDef,currentTID,isRateGrouping)
      %assign dwIdx = argDef.FirstSignalSrc
      %assign dwRec = DWorks.DWork[dwIdx]
      %if ISFIELD(dwRec, "DWorkForNumIters")
        %assert SLibDWorkWidth(dwRec) == 1
        %if isCallSite
          %assign args = args + "&NumIter_%<argIdx>"
        %else
          %assign identi   = LibGetRecordIdentifier(argDef)
          %assign dataType = SLibGetRecordDataTypeName(dwRec, "")
          %assign argument = dataType + " *" + identi
          %assign args = args + argument
        %endif
      %endif
    %endif
  %endforeach

  %return args
%endfunction

%function AppendImplicitIterSubsysNumItersDWorkForFunctionStr(fcnInfo, sysFcnName, block, args)
  %if ISFIELD(block, "IISNumItersInterfaceCanDWIndices")
    %assign canDWArgInfo = fcnInfo.DWArgs
    %assign numDWArgs = SIZE(fcnInfo.DWArgs,1)
    %foreach argIdx=numDWArgs
      %if canDWArgInfo[argIdx] >= 1 
        %assign isNumItersDW = TLC_FALSE
        %assign lenNumItersDWs = SIZE(block.IISNumItersInterfaceCanDWIndices, 1)
        %foreach numItersDWIdx = lenNumItersDWs
          %if argIdx == block.IISNumItersInterfaceCanDWIndices[numItersDWIdx]
            %assign isNumItersDW = TLC_TRUE
            %assign dwRecIdx = IDNUM(block.IISNumItersSrcDWIndices[numItersDWIdx])[1]
            %assign isCanDW  = IDNUM(block.IISNumItersSrcDWIndices[numItersDWIdx])[0] == "dp"
          %endif
        %endforeach
        %if isNumItersDW
          %assert(sysFcnName != "RegistrationFcn")
          %assign baseSystemIdx = GetBaseSystemIdx()
          %if isCanDW
            %assign blkSysIdx = System[BlockIdx[1]].HStructDeclSystemIdx
            %assign interface = System[blkSysIdx].Interface
            %assign canDWork  = interface.CanonicalDWorkArgDef[dwRecIdx]
            
            %assign arg = LibGetRecordIdentifier(canDWork) 
            %<SLibAccessArgHelper(canDWork,"",System[blkSysIdx].CurrentTID)>
          %else
            %assign blkSysIdx = System[BlockIdx[1]].HStructDeclSystemIdx
            %assign arg = SLibGetDimSizeDWorkFullPathForFcnArg(%<dwRecIdx>, blkSysIdx, System[blkSysIdx].CrossNoArgFcnBound)
            %assign blkSysIdx = System[BlockIdx[1]].HStructDeclSystemIdx
            %<SLibAccessArgHelper(System[blkSysIdx].Interface.DWorkArgDef, "", ...
              System[blkSysIdx].CurrentTID)>
          %endif
          %assign args  = args + "%<arg>"
        %endif
      %endif
    %endforeach
  %endif
  %return args
%endfunction

%function SLibDumpImplicitIterSubsysLoopBoundDWorkInfo()
  %with ExternalInputs
    %openfile loopBoundDWBuf
    %foreach idx = NumExternalInputs
      %if ISFIELD(ExternalInput[idx], "InputIISNumLoopBoundDWorks") && ...
        ExternalInput[idx].InputIISNumLoopBoundDWorks > 0
        %assign numDWs = ExternalInput[idx].InputIISNumLoopBoundDWorks
        {
          %assign loopBoundValsStr = "{"
          
          %assert(numDWs == SIZE(ExternalInput[idx].InputIISInterfaceLoopBoundDWValues, 1))
          
          %foreach lIdx = numDWs-1
            %assign loopBoundValsStr = loopBoundValsStr+"%<ExternalInput[idx].InputIISInterfaceLoopBoundDWValues[lIdx]>"+","
          %endforeach
          %assign loopBoundValsStr = loopBoundValsStr+"%<ExternalInput[idx].InputIISInterfaceLoopBoundDWValues[numDWs-1]>"+"}"
          int iisLoopBoundVals[] = %<loopBoundValsStr>;
          
          %assign canDWIndicesStr = "{"
          
          %assert(numDWs == SIZE(ExternalInput[idx].InputIISInterfaceCanDWIndices, 1))
          
          %foreach lIdx = numDWs-1
            %assign canDWIndicesStr = canDWIndicesStr+"%<ExternalInput[idx].InputIISInterfaceCanDWIndices[lIdx]>"+","
          %endforeach
          %assign canDWIndicesStr = canDWIndicesStr+"%<ExternalInput[idx].InputIISInterfaceCanDWIndices[numDWs-1]>"+"}"
     
          int iisLoopBoundCanDWIndices[] = %<canDWIndicesStr>;
          
          ssSetInputRequestIISNumIterationsDWorks(S, %<idx>, %<numDWs>, iisLoopBoundVals, iisLoopBoundCanDWIndices);
        }
      %endif
    %endforeach
    %closefile loopBoundDWBuf
    %return loopBoundDWBuf
  %endwith
  %return ""
%endfunction

%function SLibGetISSCanInputIter(sysIdx, ciIdx)
  %assign interface   = System[sysIdx].Interface
  %assign canInputArg = interface.CanonicalInputArgDef[ciIdx]
  %return ISFIELD(canInputArg, "LoopReuseIter") && canInputArg.LoopReuseIter == "yes"
%endfunction

%% Methods for handling parallel ForEach Subsystem 
%function SLibGetIsParallelInRapidAccelForEachSS(sys)
  %return SLibGetSubsystemIsImplicitIterSS(sys) && ...
    ISFIELD(sys, "ParallelExecInRapidAccelSim") && ...
    sys.ParallelExecInRapidAccelSim
%endfunction

%function SLibNeedHandleParallelForEachSS(sys, sysFcn)
  %return SLibGetIsParallelInRapidAccelForEachSS(sys) && ...
    (sysFcn == "Output" || sysFcn == "Outputs" || ...
     sysFcn == "OutputUpdate" || ...
     (sysFcn == "Derivative" && ISFIELD(sys, "ParallelExecInDerivFcn") && sys.ParallelExecInDerivFcn))
%endfunction

%function SLibGenParallelAccelForEachSS(sysIdx, fcnType) void
  %openfile retBuf
  %assign system = System[sysIdx]
  %assign fcnTypeName = SLibCGIRGetFcnTypeName(fcnType)
  %assign tmpTid = SLibSystemTidUsedByRateGroup(system,fcnTypeName)
  %assign fcnInfo = LibGetFcnInfo(system, fcnTypeName, tmpTid)
  %assign psysIdx = system.ParallelSubsystemIndex
  rt_ParallelForEachExecute(%<system.NumImplicitIter>, %<fcnInfo.Name>, %<psysIdx>);
  %closefile retBuf
  %return retBuf
%endfunction

%endif %% _IMPLICITITERSSUTIL_
%% [EOF] implicititerssutil.tlc
